!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASSET_BLOB	.\file_formats.h	/^enum ASSET_BLOB {$/;"	g
ASSET_BLOB_FONTS	.\file_formats.h	/^	ASSET_BLOB_FONTS,$/;"	e	enum:ASSET_BLOB
ASSET_BLOB_MESHES	.\file_formats.h	/^	ASSET_BLOB_MESHES,$/;"	e	enum:ASSET_BLOB
ASSET_BLOB_TEXTURES	.\file_formats.h	/^	ASSET_BLOB_TEXTURES,$/;"	e	enum:ASSET_BLOB
ASSET_BLOB_TOTAL	.\file_formats.h	/^	ASSET_BLOB_TOTAL$/;"	e	enum:ASSET_BLOB
AXIS	.\simulation.h	/^enum AXIS { AXIS_X, AXIS_Y, AXIS_Z };$/;"	g
AXIS_X	.\simulation.h	/^enum AXIS { AXIS_X, AXIS_Y, AXIS_Z };$/;"	e	enum:AXIS
AXIS_Y	.\simulation.h	/^enum AXIS { AXIS_X, AXIS_Y, AXIS_Z };$/;"	e	enum:AXIS
AXIS_Z	.\simulation.h	/^enum AXIS { AXIS_X, AXIS_Y, AXIS_Z };$/;"	e	enum:AXIS
Abs	.\math.h	3;"	d
AllocEntity	.\simulation.cpp	/^AllocEntity(EntityBlob* blob) {$/;"	f	file:
AllocateUIElements	.\ui_renderer.cpp	/^AllocateUIElements(UI_FAB fab, UIRenderer* ui_renderer) {$/;"	f	file:
ArrayCount	.\base_types.h	36;"	d
Assert	.\base_types.h	39;"	d
Assert	.\base_types.h	41;"	d
AssertHR	.\game.cpp	7;"	d	file:
Axis	.\platform_api.h	/^struct Axis { float x, y; };$/;"	s
AxisAngleFromQuat	.\math.h	/^static void AxisAngleFromQuat(Quat q, Vec3* outAxis, float* outAngle) {$/;"	f
BLACK	.\math.h	117;"	d
BLEND_STATE	.\renderer.h	/^enum BLEND_STATE {$/;"	g
BLEND_STATE_NoBlend	.\renderer.h	/^	BLEND_STATE_NoBlend,$/;"	e	enum:BLEND_STATE
BLEND_STATE_PreMulAlpha	.\renderer.h	/^	BLEND_STATE_PreMulAlpha,$/;"	e	enum:BLEND_STATE
BLEND_STATE_Regular	.\renderer.h	/^	BLEND_STATE_Regular,$/;"	e	enum:BLEND_STATE
BLEND_STATE_TOTAL	.\renderer.h	/^	BLEND_STATE_TOTAL$/;"	e	enum:BLEND_STATE
BLUE	.\math.h	123;"	d
BOUNDING_BOX_ORIENTATION	.\simulation.h	/^enum BOUNDING_BOX_ORIENTATION { BOUNDING_BOX_ORIENTATION_NORMAL, BOUNDING_BOX_ORIENTATION_INVERSE };$/;"	g
BOUNDING_BOX_ORIENTATION_INVERSE	.\simulation.h	/^enum BOUNDING_BOX_ORIENTATION { BOUNDING_BOX_ORIENTATION_NORMAL, BOUNDING_BOX_ORIENTATION_INVERSE };$/;"	e	enum:BOUNDING_BOX_ORIENTATION
BOUNDING_BOX_ORIENTATION_NORMAL	.\simulation.h	/^enum BOUNDING_BOX_ORIENTATION { BOUNDING_BOX_ORIENTATION_NORMAL, BOUNDING_BOX_ORIENTATION_INVERSE };$/;"	e	enum:BOUNDING_BOX_ORIENTATION
BUTTON_FONT_SIZE	.\ui_renderer.cpp	3;"	d	file:
BeginTemporaryMemory	.\memory_management.h	/^BeginTemporaryMemory(MemoryArena* arena) {$/;"	f
BootstrapPushSize_	.\memory_management.h	/^BootstrapPushSize_(u64 struct_size, u64 offset_to_arena, u64 min_block_size) {$/;"	f
BootstrapPushStruct	.\memory_management.h	28;"	d
BoundingBox	.\simulation.h	/^struct BoundingBox {$/;"	s
BoundingBoxIntersect	.\simulation.cpp	/^BoundingBoxIntersect(BoundingBox* left, BoundingBox* right) {$/;"	f	file:
Button	.\platform_api.h	/^struct Button { bool pressed, held; };$/;"	s
CONSTANTS_BINDING_SLOT	.\renderer.h	/^enum CONSTANTS_BINDING_SLOT {$/;"	g
CONSTANTS_BINDING_SLOT_Camera	.\renderer.h	/^	CONSTANTS_BINDING_SLOT_Camera,$/;"	e	enum:CONSTANTS_BINDING_SLOT
CONSTANTS_BINDING_SLOT_Frame	.\renderer.h	/^	CONSTANTS_BINDING_SLOT_Frame,$/;"	e	enum:CONSTANTS_BINDING_SLOT
CONSTANTS_BINDING_SLOT_Object	.\renderer.h	/^	CONSTANTS_BINDING_SLOT_Object$/;"	e	enum:CONSTANTS_BINDING_SLOT
CRIMSON	.\math.h	129;"	d
CYAN	.\math.h	124;"	d
CacheUIData	.\ui_renderer.cpp	/^CacheUIData(UIElement* element, UIRenderer* ui_renderer) {$/;"	f	file:
Camera	.\camera.cpp	/^struct Camera {$/;"	s	file:
CheckArena	.\memory_management.h	/^CheckArena(MemoryArena* arena) {$/;"	f
CipSpaceTexturedShader	.\shader_code.h	/^char CipSpaceTexturedShader[] = R"FOO($/;"	v
Clamp	.\math.h	/^Clamp(float Min, float Value, float Max) {$/;"	f
ClearDepth	.\renderer.h	/^struct ClearDepth {$/;"	s
ClearMemoryArena	.\memory_management.h	/^ClearMemoryArena(MemoryArena* arena) {$/;"	f
ClearRenderTarget	.\renderer.h	/^struct ClearRenderTarget {$/;"	s
ClearStencil	.\renderer.h	/^struct ClearStencil {$/;"	s
CompareMem	.\memory_management.h	/^static bool CompareMem(void* left, void* right, u64 len) {$/;"	f
CompileShader	.\renderer.cpp	/^CompileShader(char* shader_code, u32 shader_length, char* entry, void** shader, ID3DBlob** blob,$/;"	f	file:
CompileUIShaders	.\ui_renderer.cpp	/^CompileUIShaders(UIRenderer* ui_renderer, Renderer* renderer) {$/;"	f	file:
ConstantsBuffer	.\renderer.h	/^struct ConstantsBuffer { ID3D11Buffer* buffer; };$/;"	s
CopyMem	.\memory_management.h	/^static void CopyMem(void* to, void* from, u64 len) {$/;"	f
CopyShader	.\shader_code.h	/^char CopyShader[] = R"FOO($/;"	v
CreateReadableRenderTarget	.\renderer.cpp	/^CreateReadableRenderTarget(Renderer* renderer) {$/;"	f	file:
DEBUG_BOUNDING_BOX	.\simulation.cpp	268;"	d	file:
DEV_MODE	.\simulation.h	/^enum DEV_MODE {$/;"	g
DEV_MODE_PAUSED	.\simulation.h	/^	DEV_MODE_PAUSED = 0x1,$/;"	e	enum:DEV_MODE
DefaultFPControlInfo	.\camera.cpp	/^DefaultFPControlInfo() {$/;"	f	file:
DefaultOrthoCamera	.\camera.cpp	/^DefaultOrthoCamera(WindowDimensions wd, MemoryArena* arena) {$/;"	f	file:
DefaultPerspectiveCamera	.\camera.cpp	/^DefaultPerspectiveCamera(WindowDimensions wd, MemoryArena* arena) {$/;"	f	file:
DegToRad	.\math.h	/^static float DegToRad(float degrees) { return degrees * (PI32\/180.0f); }$/;"	f
DepthStencil	.\renderer.h	/^struct DepthStencil {$/;"	s
Directory	.\file_formats.h	/^struct Directory {$/;"	s
DrawIndexed	.\renderer.h	/^struct DrawIndexed {$/;"	s
DrawInstanced	.\renderer.h	/^struct DrawInstanced {$/;"	s
DrawVertices	.\renderer.h	/^struct DrawVertices {$/;"	s
ENTITIY_PROPERTY	.\simulation.h	/^enum ENTITIY_PROPERTY {$/;"	g
ENTITY_FAB	.\simulation.h	/^enum ENTITY_FAB { ENTITY_FAB_MINE, ENTITY_FAB_PARTICLE_SYSTEM, ENTITY_FAB_TOTAL };$/;"	g
ENTITY_FAB_MINE	.\simulation.h	/^enum ENTITY_FAB { ENTITY_FAB_MINE, ENTITY_FAB_PARTICLE_SYSTEM, ENTITY_FAB_TOTAL };$/;"	e	enum:ENTITY_FAB
ENTITY_FAB_PARTICLE_SYSTEM	.\simulation.h	/^enum ENTITY_FAB { ENTITY_FAB_MINE, ENTITY_FAB_PARTICLE_SYSTEM, ENTITY_FAB_TOTAL };$/;"	e	enum:ENTITY_FAB
ENTITY_FAB_TOTAL	.\simulation.h	/^enum ENTITY_FAB { ENTITY_FAB_MINE, ENTITY_FAB_PARTICLE_SYSTEM, ENTITY_FAB_TOTAL };$/;"	e	enum:ENTITY_FAB
ENTITY_PROPERTY_BoundingBox	.\simulation.h	/^	ENTITY_PROPERTY_BoundingBox           = 1<<4,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_DealsCollisionDamage	.\simulation.h	/^	ENTITY_PROPERTY_DealsCollisionDamage  = 1<<8,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_EntitySpawner	.\simulation.h	/^	ENTITY_PROPERTY_EntitySpawner  				= 1<<11,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_HasHealth	.\simulation.h	/^	ENTITY_PROPERTY_HasHealth             = 1<<7,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_HasParticleSystem	.\simulation.h	/^	ENTITY_PROPERTY_HasParticleSystem     = 1<<13,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_LevelBoundary	.\simulation.h	/^	ENTITY_PROPERTY_LevelBoundary  				= 1<<10,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_Mesh	.\simulation.h	/^	ENTITY_PROPERTY_Mesh                  = 1<<0,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_Movable	.\simulation.h	/^	ENTITY_PROPERTY_Movable           		= 1<<5,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_PlayerControlled	.\simulation.h	/^	ENTITY_PROPERTY_PlayerControlled      = 1<<3,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_SimpleChase	.\simulation.h	/^	ENTITY_PROPERTY_SimpleChase           = 1<<6,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_SpawnsParticleSystem	.\simulation.h	/^	ENTITY_PROPERTY_SpawnsParticleSystem  = 1<<12,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_SpinInPlace	.\simulation.h	/^	ENTITY_PROPERTY_SpinInPlace           = 1<<2,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_TOTAL	.\simulation.h	/^	ENTITY_PROPERTY_TOTAL$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_TakesCollisionDamage	.\simulation.h	/^	ENTITY_PROPERTY_TakesCollisionDamage  = 1<<9,$/;"	e	enum:ENTITIY_PROPERTY
ENTITY_PROPERTY_TexturedQuad	.\simulation.h	/^	ENTITY_PROPERTY_TexturedQuad          = 1<<1,$/;"	e	enum:ENTITIY_PROPERTY
EaseLinear	.\easings.h	/^EaseLinear(float t, float b, float c, float d) { $/;"	f
EaseSineIn	.\easings.h	/^EaseSineIn(float t, float b, float c, float d) { $/;"	f
EaseSineInOut	.\easings.h	/^EaseSineInOut(float t, float b, float c, float d) {$/;"	f
EaseSineOut	.\easings.h	/^EaseSineOut(float t, float b, float c, float d) { $/;"	f
EndTemporaryMemory	.\memory_management.h	/^EndTemporaryMemory(TemporaryMemory* temp_mem) {$/;"	f
Entity	.\simulation.h	/^struct Entity {$/;"	s
EntityBlob	.\simulation.h	/^struct EntityBlob {$/;"	s
EulerFromQuat	.\math.h	/^static Vec3 EulerFromQuat(Quat quat) {$/;"	f
ExecuteRenderCommands	.\renderer.cpp	/^ExecuteRenderCommands(Renderer* renderer) {$/;"	f	file:
F32Max	.\base_types.h	26;"	d
F32Min	.\base_types.h	27;"	d
FAST_BITS	.\include\stb_image.h	1916;"	d
FPControlInfo	.\camera.cpp	/^struct FPControlInfo {$/;"	s	file:
FirstPersonCamera	.\camera.cpp	/^FirstPersonCamera(Camera* camera, FPControlInfo* fpci, Input* input) {$/;"	f	file:
FirstPersonControl	.\camera.cpp	/^FirstPersonControl(Vec3* position, Quat* rotation, bool camera, FPControlInfo* ci, Input* input) {$/;"	f	file:
FontData	.\font_handling.cpp	/^struct FontData {$/;"	s	file:
FontFormat	.\file_formats.h	/^struct FontFormat {$/;"	s
FontsBlob	.\file_formats.h	/^struct FontsBlob {$/;"	s
FreeLastBlock	.\memory_management.h	/^FreeLastBlock(MemoryArena* arena) {$/;"	f
FreeRenderResource	.\renderer.h	/^struct FreeRenderResource {$/;"	s
FullScreenQuadShader	.\shader_code.h	/^char FullScreenQuadShader[] = R"FOO($/;"	v
GAME_LOOP	.\game.cpp	/^extern "C" GAME_LOOP(game_loop) {$/;"	f
GAME_LOOP	.\game_layer.h	19;"	d
GAME_MODE	.\game_mode.h	/^enum GAME_MODE {$/;"	g
GAME_MODE_NONE	.\game_mode.h	/^	GAME_MODE_NONE,$/;"	e	enum:GAME_MODE
GAME_MODE_TEST	.\game_mode.h	/^	GAME_MODE_TEST$/;"	e	enum:GAME_MODE
GREEN	.\math.h	132;"	d
GREY	.\math.h	120;"	d
GameAssetFile	.\file_formats.h	/^struct GameAssetFile {$/;"	s
GameAssets	.\asset_loading.cpp	/^struct GameAssets {$/;"	s	file:
GameLayer	.\game_layer.h	/^struct GameLayer {$/;"	s
GameLoop	.\game_layer.h	/^typedef GAME_LOOP(GameLoop);$/;"	t
GameState	.\game.h	/^struct GameState {$/;"	s
GenerateFlatShadedNormals	.\shapes.cpp	/^GenerateFlatShadedNormals(Vec3* vertices, u32 count, Vec3* out_normals ) {$/;"	f	file:
GenerateFontData	.\font_handling.cpp	/^GenerateFontData(float size, TextUI* text_ui) {$/;"	f	file:
GenerateTetrahedron	.\shapes.cpp	/^GenerateTetrahedron(Vec3* out_vertices) {$/;"	f	file:
GetAllFontFormats	.\asset_loading.cpp	/^GetAllFontFormats(GameAssets* ga, u32* count) {$/;"	f	file:
GetAllMeshFormats	.\asset_loading.cpp	/^GetAllMeshFormats(GameAssets* ga, u32* count) {$/;"	f	file:
GetAllTextureFormats	.\asset_loading.cpp	/^GetAllTextureFormats(GameAssets* ga, u32* count) {$/;"	f	file:
GetAssetBlob	.\asset_loading.cpp	/^GetAssetBlob(ASSET_BLOB blob, GameAssets* assets) {$/;"	f	file:
GetBoundingBoxFromMeshData	.\simulation.cpp	/^GetBoundingBoxFromMeshData(MeshData* mesh_data) {$/;"	f	file:
GetCachedElementData	.\ui_renderer.cpp	/^GetCachedElementData(u32 id, UIRenderer* ui_renderer) {$/;"	f	file:
GetFont	.\asset_loading.cpp	/^GetFont(char* name, GameAssets* ga) {$/;"	f	file:
GetFontData	.\font_handling.cpp	/^GetFontData(float size, TextUI* text_ui) {$/;"	f	file:
GetFontFormat	.\asset_loading.cpp	/^GetFontFormat(char* name, GameAssets* ga) {$/;"	f	file:
GetForwardVector	.\math.h	/^static Vec3 GetForwardVector(Quat quat) {	return V3Norm(RotateVecByQuat(V3Forward(), quat)); } $/;"	f
GetMeshAssetInfo	.\asset_info.cpp	/^GetMeshAssetInfo(char* name, GameAssets* assets) {$/;"	f	file:
GetMeshFormat	.\asset_loading.cpp	/^GetMeshFormat(char* name, GameAssets* ga) {$/;"	f	file:
GetPixelWidthForText	.\font_handling.cpp	/^GetPixelWidthForText(char* text, float size, TextUI* text_ui) {$/;"	f	file:
GetRightVector	.\math.h	/^static Vec3 GetRightVector(Quat quat) {	return V3Norm(RotateVecByQuat(V3Right(), quat)); } $/;"	f
GetTextureAssetInfo	.\asset_info.cpp	/^GetTextureAssetInfo(char* name, GameAssets* assets) {$/;"	f	file:
GetTextureFormat	.\asset_loading.cpp	/^GetTextureFormat(char* name, GameAssets* ga) {$/;"	f	file:
GetUpVector	.\math.h	/^static Vec3 GetUpVector(Quat quat) {	return V3Norm(RotateVecByQuat(V3Up(), quat)); } $/;"	f
Gigabytes	.\base_types.h	33;"	d
GlobalPerfCountFrequency	.\win32.cpp	/^global i64 GlobalPerfCountFrequency;$/;"	v
Glyph	.\font_handling.cpp	/^struct Glyph {$/;"	s	file:
I32Max	.\base_types.h	22;"	d
I32Min	.\base_types.h	21;"	d
InRange	.\math.h	/^static float InRange(float val, float min, float max) { return (val > min) && (val < max); }$/;"	f
InRangeMaxInc	.\math.h	/^static float InRangeMaxInc(float val, float min, float max) { return (val > min) && (val <= max); }$/;"	f
InRangeMinInc	.\math.h	/^static float InRangeMinInc(float val, float min, float max) { return (val >= min) && (val < max); }$/;"	f
InRangeMinMaxInc	.\math.h	/^static float InRangeMinMaxInc(float val, float min, float max) { return (val >= min) && (val <= max); }$/;"	f
IndexBuffer	.\renderer.h	/^struct IndexBuffer     { ID3D11Buffer* buffer; };$/;"	s
InitFont	.\font_handling.cpp	/^InitFont(void* data, WindowDimensions wd, Renderer* renderer, MemoryArena* arena, MemoryArena* frame) {$/;"	f	file:
InitMeshRenderer	.\mesh_renderer.cpp	/^InitMeshRenderer(Renderer* renderer, MemoryArena* arena) {$/;"	f
InitMeshShader	.\mesh_renderer.cpp	/^InitMeshShader(MeshRenderer* mesh_renderer, Renderer* renderer) {$/;"	f	file:
InitPostProcessRenderer	.\post_process_renderer.cpp	/^InitPostProcessRenderer(Renderer* renderer, MemoryArena* arena) {$/;"	f	file:
InitPostProcessShaders	.\post_process_renderer.cpp	/^InitPostProcessShaders(PostProcessRenderer* pp_renderer, Renderer* renderer) {$/;"	f	file:
InitQuadRenderer	.\quad_renderer.cpp	/^InitQuadRenderer(Renderer* renderer, MemoryArena* arena) {$/;"	f	file:
InitRenderer	.\renderer.cpp	/^InitRenderer(Win32Window* window, MemoryArena* parent_arena, MemoryArena* frame_arena) {$/;"	f	file:
InitTestMode	.\game_mode.cpp	/^InitTestMode(GameState* game_state, WindowDimensions dim) {$/;"	f	file:
InitTetra	.\tetra.cpp	/^InitTetra(Renderer* renderer, MemoryArena* arena) {$/;"	f	file:
InitUIRenderer	.\ui_renderer.cpp	/^InitUIRenderer(Renderer* renderer, WindowDimensions wd, TextUI* text_ui, MemoryArena* arena, MemoryArena* frame_arena) {$/;"	f	file:
Input	.\platform_api.h	/^struct Input {$/;"	s
IsPointInQuad	.\shapes.cpp	/^IsPointInQuad(Vec2 min, Vec2 max, Vec2 point) {$/;"	f	file:
JET	.\math.h	119;"	d
Kilobytes	.\base_types.h	31;"	d
LIME	.\math.h	131;"	d
LightInfo	.\mesh_renderer.cpp	/^struct LightInfo {$/;"	s	file:
Line	.\shapes.cpp	/^struct Line {$/;"	s	file:
LoadAllMeshAssets	.\asset_info.cpp	/^LoadAllMeshAssets(GameAssets* assets) {$/;"	f	file:
LoadAllTextureAssets	.\asset_info.cpp	/^LoadAllTextureAssets(GameAssets* assets) {$/;"	f	file:
LoadGameAssets	.\asset_loading.cpp	/^LoadGameAssets(MemoryArena* arena) {$/;"	f	file:
LoadMeshAsset	.\asset_info.cpp	/^LoadMeshAsset(char* name, GameAssets* assets) {$/;"	f	file:
LoadMeshData	.\asset_loading.cpp	/^LoadMeshData(MeshFormat* mf, GameAssets* ga) {$/;"	f
LoadTextureAsset	.\asset_info.cpp	/^LoadTextureAsset(char* name, GameAssets* assets) {$/;"	f	file:
LoadTextureData	.\asset_info.cpp	/^LoadTextureData(TextureFormat* tf, GameAssets* assets) {$/;"	f	file:
M4FromQuat	.\math.h	/^static Mat4 M4FromQuat(Quat quat) {$/;"	f
M4I	.\math.h	/^static Mat4 M4I() {$/;"	f
M4LookAt	.\math.h	/^static Mat4 M4LookAt(Vec3 pos, Vec3 target, Vec3 Up) {$/;"	f
M4Mul	.\math.h	/^static Mat4 M4Mul(Mat4 left, Mat4 right) {$/;"	f
M4MulF	.\math.h	/^static Mat4 M4MulF(Mat4 mat, float scalar) {$/;"	f
M4MulV	.\math.h	/^static Vec4 M4MulV(Mat4 mat, Vec4 vec) {$/;"	f
M4Orthographic	.\math.h	/^static Mat4 M4Orthographic(float left, float right, float bottom,$/;"	f
M4Perspective	.\math.h	/^static Mat4 M4Perspective(float fov, float aspect_ratio, float Near, float Far) {$/;"	f
M4Rotate	.\math.h	/^static Mat4 M4Rotate(Vec3 axis, float angle) {$/;"	f
M4Scale	.\math.h	/^static Mat4 M4Scale(Vec3 scale) {$/;"	f
M4Translate	.\math.h	/^static Mat4 M4Translate(Vec3 translation) {$/;"	f
M4Transpose	.\math.h	/^static Mat4 M4Transpose(Mat4 mat) {$/;"	f
MAGENTA	.\math.h	138;"	d
MAROON	.\math.h	128;"	d
MAX_ENTITIES	.\simulation.h	104;"	d
MAX_FONT_ATLAS_HEIGHT	.\font_handling.cpp	2;"	d	file:
MAX_FONT_ATLAS_WIDTH	.\font_handling.cpp	1;"	d	file:
MAX_GLYPHS_ON_SCREEN	.\font_handling.cpp	3;"	d	file:
MAX_MESH_PIPELINES	.\mesh_renderer.cpp	1;"	d	file:
MAX_PARTICLES	.\simulation.h	45;"	d
MAX_QUADS	.\quad_renderer.cpp	1;"	d	file:
MAX_SPAWNS	.\simulation.h	34;"	d
MAX_TETRA	.\tetra.cpp	1;"	d	file:
MAX_TEXTURED_QUADS	.\quad_renderer.cpp	2;"	d	file:
MAX_UI_ELEMENTS	.\ui_renderer.cpp	1;"	d	file:
MakeD3DInputElementDesc	.\renderer.cpp	/^MakeD3DInputElementDesc(VERTEX_BUFFER* vb_type, D3D11_INPUT_ELEMENT_DESC* d3d_il_desc, u8 count) {$/;"	f	file:
MakeQuadFromLine	.\shapes.cpp	/^MakeQuadFromLine(Line* line, float thickness, Vec3 normal) {$/;"	f	file:
MakeQuat	.\math.h	/^static Quat MakeQuat(float x, float y, float z, float w) { return Quat { x, y, z, w}; }$/;"	f
MakeQuatFromV3	.\math.h	/^static Quat MakeQuatFromV3(Vec3 vec) { return Quat { vec.x, vec.y, vec.z, 1 }; }$/;"	f
MakeQuatFromV4	.\math.h	/^static Quat MakeQuatFromV4(Vec4 vec) { return Quat { vec.x, vec.y, vec.z, vec.w }; }$/;"	f
MakeTransformMatrix	.\math.h	/^static Mat4 MakeTransformMatrix(Transform transform) {$/;"	f
MakeVertexBufferData	.\asset_loading.cpp	/^MakeVertexBufferData(VertexBufferFormat* vbf, GameAssets* ga) {$/;"	f
MakeViewPerspective	.\camera.cpp	/^MakeViewPerspective(Camera* camera) {$/;"	f	file:
Mat4	.\math.h	/^struct Mat4 {$/;"	s
MaterialData	.\asset_formats.h	/^struct MaterialData {$/;"	s
Max	.\base_types.h	44;"	d
Megabytes	.\base_types.h	32;"	d
MemoryArena	.\memory_management.h	/^struct MemoryArena {$/;"	s
Mesh	.\mesh_renderer.cpp	/^struct Mesh {$/;"	s	file:
MeshAssetInfo	.\asset_info.h	/^struct MeshAssetInfo {$/;"	s
MeshData	.\asset_formats.h	/^struct MeshData {$/;"	s
MeshFormat	.\file_formats.h	/^struct MeshFormat {$/;"	s
MeshInfo	.\mesh_renderer.cpp	/^struct MeshInfo {$/;"	s	file:
MeshPipeline	.\mesh_renderer.cpp	/^struct MeshPipeline {$/;"	s	file:
MeshRenderer	.\mesh_renderer.cpp	/^struct MeshRenderer {$/;"	s	file:
MeshRendererFrame	.\mesh_renderer.cpp	/^MeshRendererFrame(MeshRenderer* mesh_renderer, Camera* camera, Renderer* renderer) {$/;"	f	file:
MeshShader	.\shader_code.h	/^char MeshShader[] = R"FOO($/;"	v
MeshesBlob	.\file_formats.h	/^struct MeshesBlob {$/;"	s
Min	.\base_types.h	45;"	d
Mod	.\math.h	4;"	d
MonochromeShader	.\shader_code.h	/^char MonochromeShader[] = R"FOO($/;"	v
OLIVE	.\math.h	134;"	d
ORANGE	.\math.h	136;"	d
OVERLAY_FONT_SIZE	.\ui_renderer.cpp	2;"	d	file:
PI32	.\base_types.h	29;"	d
PLATFORM_ALLOCATE_MEMORY	.\platform_api.h	121;"	d
PLATFORM_ALLOCATE_MEMORY	.\win32.cpp	/^static PLATFORM_ALLOCATE_MEMORY(win32_allocate_memory) {$/;"	f	file:
PLATFORM_CLOSE_FILE	.\platform_api.h	115;"	d
PLATFORM_CLOSE_FILE	.\win32.cpp	/^static PLATFORM_CLOSE_FILE(win32_close_file) {$/;"	f	file:
PLATFORM_DEALLOCATE_MEMORY	.\platform_api.h	124;"	d
PLATFORM_DEALLOCATE_MEMORY	.\win32.cpp	/^static PLATFORM_DEALLOCATE_MEMORY(win32_deallocate_memory) {$/;"	f	file:
PLATFORM_OPEN_FILE	.\platform_api.h	112;"	d
PLATFORM_OPEN_FILE	.\win32.cpp	/^static PLATFORM_OPEN_FILE(win32_open_file) {$/;"	f	file:
PLATFORM_READ_FILE	.\platform_api.h	118;"	d
PLATFORM_READ_FILE	.\win32.cpp	/^static PLATFORM_READ_FILE(win32_read_file) {$/;"	f	file:
POST_PROCESS_TYPE	.\post_process_renderer.cpp	/^enum POST_PROCESS_TYPE {$/;"	g	file:
POST_PROCESS_TYPE_Copy	.\post_process_renderer.cpp	/^	POST_PROCESS_TYPE_Copy,$/;"	e	enum:POST_PROCESS_TYPE	file:
POST_PROCESS_TYPE_Edge	.\post_process_renderer.cpp	/^	POST_PROCESS_TYPE_Edge,$/;"	e	enum:POST_PROCESS_TYPE	file:
POST_PROCESS_TYPE_TOTAL	.\post_process_renderer.cpp	/^	POST_PROCESS_TYPE_TOTAL,$/;"	e	enum:POST_PROCESS_TYPE	file:
PRIMITITVE_TOPOLOGY	.\renderer.h	/^enum PRIMITITVE_TOPOLOGY {$/;"	g
PRIMITIVE_TOPOLOGY_TriangleList	.\renderer.h	/^	PRIMITIVE_TOPOLOGY_TriangleList,$/;"	e	enum:PRIMITITVE_TOPOLOGY
PRIMITIVE_TOPOLOGY_TriangleStrip	.\renderer.h	/^	PRIMITIVE_TOPOLOGY_TriangleStrip$/;"	e	enum:PRIMITITVE_TOPOLOGY
PURPLE	.\math.h	139;"	d
ParticleSystem	.\simulation.h	/^struct ParticleSystem {$/;"	s
PixelShader	.\renderer.h	/^struct PixelShader {$/;"	s
PlatformAPI	.\platform_api.h	/^struct PlatformAPI {$/;"	s
PlatformAllocateMemory	.\platform_api.h	/^typedef PLATFORM_ALLOCATE_MEMORY(PlatformAllocateMemory);$/;"	t
PlatformCloseFile	.\platform_api.h	/^typedef PLATFORM_CLOSE_FILE(PlatformCloseFile);$/;"	t
PlatformDeallocateMemory	.\platform_api.h	/^typedef PLATFORM_DEALLOCATE_MEMORY(PlatformDeallocateMemory);$/;"	t
PlatformFileHandle	.\platform_api.h	/^struct PlatformFileHandle {$/;"	s
PlatformFileInfo	.\platform_api.h	/^struct PlatformFileInfo {$/;"	s
PlatformMemoryBlock	.\platform_api.h	/^struct PlatformMemoryBlock {$/;"	s
PlatformOpenFile	.\platform_api.h	/^typedef PLATFORM_OPEN_FILE(PlatformOpenFile);    $/;"	t
PlatformReadFile	.\platform_api.h	/^typedef PLATFORM_READ_FILE(PlatformReadFile);$/;"	t
PostProcessPipeline	.\post_process_renderer.cpp	/^struct PostProcessPipeline {$/;"	s	file:
PostProcessRenderer	.\post_process_renderer.cpp	/^struct PostProcessRenderer {$/;"	s	file:
PostProcessRendererFrame	.\post_process_renderer.cpp	/^PostProcessRendererFrame(PostProcessRenderer* pp_renderer, Renderer* renderer) {$/;"	f	file:
PostProcessShader	.\shader_code.h	/^char PostProcessShader[] = R"FOO($/;"	v
PushArray	.\memory_management.h	26;"	d
PushArrayClear	.\memory_management.h	27;"	d
PushCommandBuffer	.\renderer.cpp	/^PushCommandBuffer(Renderer* renderer, u32 size) {$/;"	f	file:
PushGlyphs	.\font_handling.cpp	/^PushGlyphs(char* text, FontData* font_data, float* x, float* y, Vec2 screen_res) {$/;"	f	file:
PushMeshAssetInfo	.\asset_info.cpp	/^PushMeshAssetInfo(GameAssets* ga) {$/;"	f	file:
PushMeshPipeline	.\mesh_renderer.cpp	/^PushMeshPipeline(MeshPipeline pipeline, MeshRenderer* mesh_renderer) {$/;"	f	file:
PushParticleQuad	.\quad_renderer.cpp	/^PushParticleQuad(Quad* quad, TextureBuffer* texture_buffer, QuadRenderer* quad_renderer) {$/;"	f	file:
PushPostProcessPipeline	.\post_process_renderer.cpp	/^PushPostProcessPipeline(PostProcessPipeline* pipeline, PostProcessRenderer* pp_renderer, Renderer* renderer) {$/;"	f	file:
PushRenderBufferData	.\renderer.h	/^struct PushRenderBufferData {$/;"	s
PushRenderCommand	.\renderer.cpp	29;"	d	file:
PushRenderCommand_	.\renderer.cpp	/^PushRenderCommand_(Renderer* renderer, u32 size, RENDER_COMMAND type ) {$/;"	f	file:
PushRenderData	.\renderer.cpp	/^PushRenderData(ID3D11Buffer* buffer, void* data, u32 size, ID3D11DeviceContext* context) {$/;"	f	file:
PushRenderLine	.\quad_renderer.cpp	/^PushRenderLine(Line* line, Vec4 color, float thickness, Camera* camera, QuadRenderer* quad_renderer) {$/;"	f	file:
PushRenderQuad	.\quad_renderer.cpp	/^PushRenderQuad(Quad* quad, Vec4 color, QuadRenderer* quad_renderer) {$/;"	f	file:
PushSize	.\memory_management.h	22;"	d
PushSizeClear	.\memory_management.h	23;"	d
PushSize_	.\memory_management.h	/^PushSize_(MemoryArena* arena, u64 size, bool clear) {$/;"	f
PushStruct	.\memory_management.h	24;"	d
PushStructClear	.\memory_management.h	25;"	d
PushTextPixelSpace	.\font_handling.cpp	/^PushTextPixelSpace(char* text, float font_size, Vec2 psc, TextUI* text_ui) {$/;"	f	file:
PushTextScreenSpace	.\font_handling.cpp	/^PushTextScreenSpace(char* text, float size, Vec2 ssc, TextUI* text_ui) {$/;"	f	file:
PushTextureAssetInfo	.\asset_info.cpp	/^PushTextureAssetInfo(GameAssets* ga) {$/;"	f	file:
PushTexturedQuad	.\quad_renderer.cpp	/^PushTexturedQuad(Quad* quad, TextureBuffer* texture_buffer, QuadRenderer* quad_renderer) {$/;"	f	file:
PushUIButton	.\ui_renderer.cpp	/^PushUIButton(char** text, Vec2 ssp, UIRenderer* ui_renderer) {$/;"	f	file:
PushUIElement	.\ui_renderer.cpp	/^PushUIElement(UIElement* element, UIRenderer* ui_renderer) {$/;"	f	file:
PushUIOverlay	.\ui_renderer.cpp	/^PushUIOverlay(char** text, u8 text_count, Vec2 ssp, UIRenderer* ui_renderer) {$/;"	f	file:
Quad	.\shapes.cpp	/^struct Quad {$/;"	s	file:
QuadRenderer	.\quad_renderer.cpp	/^struct QuadRenderer {$/;"	s	file:
QuadRendererFrame	.\quad_renderer.cpp	/^QuadRendererFrame(QuadRenderer* quad_renderer, Camera* cam, Renderer* renderer) {$/;"	f	file:
QuadShader	.\shader_code.h	/^char QuadShader[] = R"FOO($/;"	v
Quat	.\math.h	/^struct Quat {$/;"	s
QuatAdd	.\math.h	/^static Quat QuatAdd(Quat left, Quat right) {$/;"	f
QuatDivF	.\math.h	/^static Quat QuatDivF(Quat quat, float scalar) {$/;"	f
QuatDot	.\math.h	/^static float QuatDot(Quat left, Quat right) {$/;"	f
QuatFromAxisAngle	.\math.h	/^static Quat QuatFromAxisAngle(Vec3 axis, float angle) {$/;"	f
QuatFromDirectionChange	.\math.h	/^static Quat QuatFromDirectionChange(Vec3 from, Vec3 to) {$/;"	f
QuatFromEuler	.\math.h	/^static Quat QuatFromEuler(float pitch , float yaw, float roll) {$/;"	f
QuatI	.\math.h	/^static Quat QuatI() { return Quat { 0.0f, 0.0f, 0.0f, 1.0f }; }$/;"	f
QuatInverse	.\math.h	/^static Quat QuatInverse(Quat quat) {$/;"	f
QuatMul	.\math.h	/^static Quat QuatMul(Quat left, Quat right) { $/;"	f
QuatMulF	.\math.h	/^static Quat QuatMulF(Quat quat, float scalar) {$/;"	f
QuatNorm	.\math.h	/^static Quat QuatNorm(Quat quat) {$/;"	f
QuatSub	.\math.h	/^static Quat QuatSub(Quat left, Quat right) {$/;"	f
RASTERIZER_STATE	.\renderer.h	/^enum RASTERIZER_STATE {$/;"	g
RASTERIZER_STATE_Default	.\renderer.h	/^	RASTERIZER_STATE_Default,$/;"	e	enum:RASTERIZER_STATE
RASTERIZER_STATE_DoubleSided	.\renderer.h	/^	RASTERIZER_STATE_DoubleSided,$/;"	e	enum:RASTERIZER_STATE
RASTERIZER_STATE_TOTAL	.\renderer.h	/^	RASTERIZER_STATE_TOTAL$/;"	e	enum:RASTERIZER_STATE
RASTERIZER_STATE_Wireframe	.\renderer.h	/^	RASTERIZER_STATE_Wireframe,$/;"	e	enum:RASTERIZER_STATE
RED	.\math.h	127;"	d
RENDER_COMMAND	.\renderer.h	/^enum RENDER_COMMAND {$/;"	g
RENDER_COMMAND_ClearDepth	.\renderer.h	/^	RENDER_COMMAND_ClearDepth,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_ClearRenderTarget	.\renderer.h	/^	RENDER_COMMAND_ClearRenderTarget,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_ClearStencil	.\renderer.h	/^	RENDER_COMMAND_ClearStencil,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_DrawIndexed	.\renderer.h	/^	RENDER_COMMAND_DrawIndexed,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_DrawInstanced	.\renderer.h	/^	RENDER_COMMAND_DrawInstanced,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_DrawVertices	.\renderer.h	/^	RENDER_COMMAND_DrawVertices,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_FreeRenderResource	.\renderer.h	/^	RENDER_COMMAND_FreeRenderResource$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_PushRenderBufferData	.\renderer.h	/^	RENDER_COMMAND_PushRenderBufferData,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetBlendState	.\renderer.h	/^	RENDER_COMMAND_SetBlendState,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetConstantsBuffer	.\renderer.h	/^	RENDER_COMMAND_SetConstantsBuffer,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetDepthStencilState	.\renderer.h	/^	RENDER_COMMAND_SetDepthStencilState,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetIndexBuffer	.\renderer.h	/^	RENDER_COMMAND_SetIndexBuffer,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetPixelShader	.\renderer.h	/^	RENDER_COMMAND_SetPixelShader,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetPrimitiveTopology	.\renderer.h	/^	RENDER_COMMAND_SetPrimitiveTopology,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetRasterizerState	.\renderer.h	/^	RENDER_COMMAND_SetRasterizerState,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetRenderTarget	.\renderer.h	/^	RENDER_COMMAND_SetRenderTarget,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetSamplerState	.\renderer.h	/^	RENDER_COMMAND_SetSamplerState,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetStructuredBuffer	.\renderer.h	/^	RENDER_COMMAND_SetStructuredBuffer,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetTextureBuffer	.\renderer.h	/^	RENDER_COMMAND_SetTextureBuffer,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetTopology	.\renderer.h	/^	RENDER_COMMAND_SetTopology,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetVertexBuffer	.\renderer.h	/^	RENDER_COMMAND_SetVertexBuffer,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetVertexShader	.\renderer.h	/^	RENDER_COMMAND_SetVertexShader,$/;"	e	enum:RENDER_COMMAND
RENDER_COMMAND_SetViewport	.\renderer.h	/^	RENDER_COMMAND_SetViewport,$/;"	e	enum:RENDER_COMMAND
RESPONSE	.\simulation.h	/^enum RESPONSE { RESPONSE_NONE, RESPONSE_DEFENSIVE, RESPONSE_HOSTILE };$/;"	g
RESPONSE_DEFENSIVE	.\simulation.h	/^enum RESPONSE { RESPONSE_NONE, RESPONSE_DEFENSIVE, RESPONSE_HOSTILE };$/;"	e	enum:RESPONSE
RESPONSE_HOSTILE	.\simulation.h	/^enum RESPONSE { RESPONSE_NONE, RESPONSE_DEFENSIVE, RESPONSE_HOSTILE };$/;"	e	enum:RESPONSE
RESPONSE_NONE	.\simulation.h	/^enum RESPONSE { RESPONSE_NONE, RESPONSE_DEFENSIVE, RESPONSE_HOSTILE };$/;"	e	enum:RESPONSE
RadToDeg	.\math.h	/^static float RadToDeg(float radians) { return radians * (180\/PI32); }$/;"	f
ReadableRenderTarget	.\renderer.h	/^struct ReadableRenderTarget {$/;"	s
ReleaseEntity	.\simulation.cpp	/^ReleaseEntity(Entity* entity, EntityBlob* blob) {$/;"	f	file:
RenderCommandHeader	.\renderer.h	/^struct RenderCommandHeader { u8 type; };$/;"	s
RenderQuad	.\quad_renderer.cpp	/^struct RenderQuad {$/;"	s	file:
RenderTarget	.\renderer.h	/^struct RenderTarget {$/;"	s
RenderTetra	.\tetra.cpp	/^RenderTetra(Tetra* tetra, MeshRenderer* mesh_renderer) {$/;"	f	file:
Renderer	.\renderer.h	/^struct Renderer {$/;"	s
RendererBeginFrame	.\renderer.cpp	/^RendererBeginFrame(Renderer* renderer, WindowDimensions wd, MemoryArena* frame_arena) {$/;"	f	file:
RendererEndFrame	.\renderer.cpp	/^RendererEndFrame(Renderer* renderer) {$/;"	f	file:
ResolveCollision	.\simulation.cpp	/^ResolveCollision(Entity* a, Entity* b) {$/;"	f	file:
ResolveDamageExchange	.\simulation.cpp	/^ResolveDamageExchange(Entity* a, Entity* b) {$/;"	f	file:
RotateVecByQuat	.\math.h	/^static Vec3 RotateVecByQuat(Vec3 vec, Quat quat) {$/;"	f
SAMPLER_STATE	.\renderer.h	/^enum SAMPLER_STATE {$/;"	g
SAMPLER_STATE_Default	.\renderer.h	/^	SAMPLER_STATE_Default,$/;"	e	enum:SAMPLER_STATE
SAMPLER_STATE_TOTAL	.\renderer.h	/^	SAMPLER_STATE_TOTAL$/;"	e	enum:SAMPLER_STATE
SILVER	.\math.h	121;"	d
STBIDEF	.\include\stb_image.h	393;"	d
STBIDEF	.\include\stb_image.h	395;"	d
STBI_ASSERT	.\include\stb_image.h	600;"	d
STBI_EXTERN	.\include\stb_image.h	604;"	d
STBI_EXTERN	.\include\stb_image.h	606;"	d
STBI_FREE	.\include\stb_image.h	681;"	d
STBI_HAS_LROTL	.\include\stb_image.h	661;"	d
STBI_INCLUDE_STB_IMAGE_H	.\include\stb_image.h	127;"	d
STBI_MALLOC	.\include\stb_image.h	679;"	d
STBI_MAX_DIMENSIONS	.\include\stb_image.h	793;"	d
STBI_NEON	.\include\stb_image.h	776;"	d
STBI_NOTUSED	.\include\stb_image.h	655;"	d
STBI_NOTUSED	.\include\stb_image.h	657;"	d
STBI_NO_BMP	.\include\stb_image.h	557;"	d
STBI_NO_GIF	.\include\stb_image.h	566;"	d
STBI_NO_HDR	.\include\stb_image.h	569;"	d
STBI_NO_JPEG	.\include\stb_image.h	551;"	d
STBI_NO_PIC	.\include\stb_image.h	572;"	d
STBI_NO_PNG	.\include\stb_image.h	554;"	d
STBI_NO_PNM	.\include\stb_image.h	575;"	d
STBI_NO_PSD	.\include\stb_image.h	560;"	d
STBI_NO_SIMD	.\include\stb_image.h	703;"	d
STBI_NO_SIMD	.\include\stb_image.h	718;"	d
STBI_NO_TGA	.\include\stb_image.h	563;"	d
STBI_NO_ZLIB	.\include\stb_image.h	580;"	d
STBI_ORDER_BGR	.\include\stb_image.h	/^	STBI_ORDER_BGR$/;"	e	enum:__anon7
STBI_ORDER_RGB	.\include\stb_image.h	/^	STBI_ORDER_RGB,$/;"	e	enum:__anon7
STBI_REALLOC	.\include\stb_image.h	680;"	d
STBI_REALLOC_SIZED	.\include\stb_image.h	685;"	d
STBI_SIMD_ALIGN	.\include\stb_image.h	748;"	d
STBI_SIMD_ALIGN	.\include\stb_image.h	759;"	d
STBI_SIMD_ALIGN	.\include\stb_image.h	782;"	d
STBI_SIMD_ALIGN	.\include\stb_image.h	784;"	d
STBI_SIMD_ALIGN	.\include\stb_image.h	789;"	d
STBI_SSE2	.\include\stb_image.h	722;"	d
STBI_THREAD_LOCAL	.\include\stb_image.h	622;"	d
STBI_THREAD_LOCAL	.\include\stb_image.h	624;"	d
STBI_THREAD_LOCAL	.\include\stb_image.h	626;"	d
STBI_THREAD_LOCAL	.\include\stb_image.h	628;"	d
STBI_THREAD_LOCAL	.\include\stb_image.h	633;"	d
STBI_VERSION	.\include\stb_image.h	371;"	d
STBI__BYTECAST	.\include\stb_image.h	1710;"	d
STBI__CASE	.\include\stb_image.h	1754;"	d
STBI__CASE	.\include\stb_image.h	1772;"	d
STBI__CASE	.\include\stb_image.h	1811;"	d
STBI__CASE	.\include\stb_image.h	1829;"	d
STBI__CASE	.\include\stb_image.h	4675;"	d
STBI__CASE	.\include\stb_image.h	4688;"	d
STBI__CASE	.\include\stb_image.h	4692;"	d
STBI__CASE	.\include\stb_image.h	4705;"	d
STBI__COMBO	.\include\stb_image.h	1753;"	d
STBI__COMBO	.\include\stb_image.h	1810;"	d
STBI__F_avg	.\include\stb_image.h	/^	STBI__F_avg=3,$/;"	e	enum:__anon18
STBI__F_avg_first	.\include\stb_image.h	/^	STBI__F_avg_first,$/;"	e	enum:__anon18
STBI__F_none	.\include\stb_image.h	/^	STBI__F_none=0,$/;"	e	enum:__anon18
STBI__F_paeth	.\include\stb_image.h	/^	STBI__F_paeth=4,$/;"	e	enum:__anon18
STBI__F_paeth_first	.\include\stb_image.h	/^	STBI__F_paeth_first$/;"	e	enum:__anon18
STBI__F_sub	.\include\stb_image.h	/^	STBI__F_sub=1,$/;"	e	enum:__anon18
STBI__F_up	.\include\stb_image.h	/^	STBI__F_up=2,$/;"	e	enum:__anon18
STBI__HDR_BUFLEN	.\include\stb_image.h	7030;"	d
STBI__IDCT_1D	.\include\stb_image.h	2396;"	d
STBI__MARKER_none	.\include\stb_image.h	2881;"	d
STBI__PNG_TYPE	.\include\stb_image.h	5021;"	d
STBI__RESTART	.\include\stb_image.h	2898;"	d
STBI__SCAN_header	.\include\stb_image.h	/^			STBI__SCAN_header$/;"	e	enum:__anon9
STBI__SCAN_load	.\include\stb_image.h	/^			STBI__SCAN_load=0,$/;"	e	enum:__anon9
STBI__SCAN_type	.\include\stb_image.h	/^			STBI__SCAN_type,$/;"	e	enum:__anon9
STBI__X64_TARGET	.\include\stb_image.h	690;"	d
STBI__X86_TARGET	.\include\stb_image.h	692;"	d
STBI__ZFAST_BITS	.\include\stb_image.h	4034;"	d
STBI__ZFAST_MASK	.\include\stb_image.h	4035;"	d
STBI__ZNSYMS	.\include\stb_image.h	4036;"	d
STBI_default	.\include\stb_image.h	/^	STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon4
STBI_grey	.\include\stb_image.h	/^	STBI_grey       = 1,$/;"	e	enum:__anon4
STBI_grey_alpha	.\include\stb_image.h	/^	STBI_grey_alpha = 2,$/;"	e	enum:__anon4
STBI_rgb	.\include\stb_image.h	/^	STBI_rgb        = 3,$/;"	e	enum:__anon4
STBI_rgb_alpha	.\include\stb_image.h	/^	STBI_rgb_alpha  = 4$/;"	e	enum:__anon4
STBRP_ASSERT	.\include\stb_rect_pack.h	213;"	d
STBRP_DEF	.\include\stb_rect_pack.h	72;"	d
STBRP_DEF	.\include\stb_rect_pack.h	74;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	.\include\stb_rect_pack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon23
STBRP_HEURISTIC_Skyline_BL_sortHeight	.\include\stb_rect_pack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon23
STBRP_HEURISTIC_Skyline_default	.\include\stb_rect_pack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon23
STBRP_SORT	.\include\stb_rect_pack.h	208;"	d
STBRP__CDECL	.\include\stb_rect_pack.h	218;"	d
STBRP__CDECL	.\include\stb_rect_pack.h	221;"	d
STBRP__INIT_skyline	.\include\stb_rect_pack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon24
STBRP__MAXVAL	.\include\stb_rect_pack.h	87;"	d
STBRP__NOTUSED	.\include\stb_rect_pack.h	217;"	d
STBRP__NOTUSED	.\include\stb_rect_pack.h	220;"	d
STBSP_SPRINTFCB	.\include\stb_sprintf.h	/^typedef char *STBSP_SPRINTFCB(const char *buf, void *user, int len);$/;"	t
STBSP__ASAN	.\include\stb_sprintf.h	149;"	d
STBSP__ASAN	.\include\stb_sprintf.h	151;"	d
STBSP__ASAN	.\include\stb_sprintf.h	153;"	d
STBSP__ASAN	.\include\stb_sprintf.h	159;"	d
STBSP__ASAN	.\include\stb_sprintf.h	164;"	d
STBSP__ATTRIBUTE_FORMAT	.\include\stb_sprintf.h	182;"	d
STBSP__ATTRIBUTE_FORMAT	.\include\stb_sprintf.h	187;"	d
STBSP__COPYFP	.\include\stb_sprintf.h	1483;"	d
STBSP__COPYFP	.\include\stb_sprintf.h	1852;"	d
STBSP__HALFWIDTH	.\include\stb_sprintf.h	289;"	d
STBSP__INTMAX	.\include\stb_sprintf.h	1363;"	d
STBSP__INTMAX	.\include\stb_sprintf.h	285;"	d
STBSP__LEADINGPLUS	.\include\stb_sprintf.h	1359;"	d
STBSP__LEADINGPLUS	.\include\stb_sprintf.h	281;"	d
STBSP__LEADINGSPACE	.\include\stb_sprintf.h	1360;"	d
STBSP__LEADINGSPACE	.\include\stb_sprintf.h	282;"	d
STBSP__LEADINGZERO	.\include\stb_sprintf.h	1362;"	d
STBSP__LEADINGZERO	.\include\stb_sprintf.h	284;"	d
STBSP__LEADING_0X	.\include\stb_sprintf.h	1361;"	d
STBSP__LEADING_0X	.\include\stb_sprintf.h	283;"	d
STBSP__LEFTJUST	.\include\stb_sprintf.h	1358;"	d
STBSP__LEFTJUST	.\include\stb_sprintf.h	280;"	d
STBSP__METRIC_1024	.\include\stb_sprintf.h	291;"	d
STBSP__METRIC_JEDEC	.\include\stb_sprintf.h	292;"	d
STBSP__METRIC_NOSPACE	.\include\stb_sprintf.h	290;"	d
STBSP__METRIC_SUFFIX	.\include\stb_sprintf.h	1366;"	d
STBSP__METRIC_SUFFIX	.\include\stb_sprintf.h	288;"	d
STBSP__NEGATIVE	.\include\stb_sprintf.h	1365;"	d
STBSP__NEGATIVE	.\include\stb_sprintf.h	287;"	d
STBSP__NOTUSED	.\include\stb_sprintf.h	191;"	d
STBSP__NOTUSED	.\include\stb_sprintf.h	193;"	d
STBSP__NUMSZ	.\include\stb_sprintf.h	1367;"	d
STBSP__NUMSZ	.\include\stb_sprintf.h	573;"	d
STBSP__PUBLICDEC	.\include\stb_sprintf.h	168;"	d
STBSP__PUBLICDEC	.\include\stb_sprintf.h	172;"	d
STBSP__PUBLICDEC	.\include\stb_sprintf.h	175;"	d
STBSP__PUBLICDEF	.\include\stb_sprintf.h	169;"	d
STBSP__PUBLICDEF	.\include\stb_sprintf.h	173;"	d
STBSP__PUBLICDEF	.\include\stb_sprintf.h	176;"	d
STBSP__SPECIAL	.\include\stb_sprintf.h	1851;"	d
STBSP__SPECIAL	.\include\stb_sprintf.h	256;"	d
STBSP__TRIPLET_COMMA	.\include\stb_sprintf.h	1364;"	d
STBSP__TRIPLET_COMMA	.\include\stb_sprintf.h	286;"	d
STBSP__UNALIGNED	.\include\stb_sprintf.h	1862;"	d
STBSP__UNALIGNED	.\include\stb_sprintf.h	247;"	d
STBSP__UNALIGNED	.\include\stb_sprintf.h	249;"	d
STBTT_DEF	.\include\stb_truetype.h	503;"	d
STBTT_DEF	.\include\stb_truetype.h	505;"	d
STBTT_FIX	.\include\stb_truetype.h	2832;"	d
STBTT_FIXMASK	.\include\stb_truetype.h	2833;"	d
STBTT_FIXSHIFT	.\include\stb_truetype.h	2831;"	d
STBTT_GPOS_TODO_assert	.\include\stb_truetype.h	2494;"	d
STBTT_MACSTYLE_BOLD	.\include\stb_truetype.h	1027;"	d
STBTT_MACSTYLE_DONTCARE	.\include\stb_truetype.h	1026;"	d
STBTT_MACSTYLE_ITALIC	.\include\stb_truetype.h	1028;"	d
STBTT_MACSTYLE_NONE	.\include\stb_truetype.h	1030;"	d
STBTT_MACSTYLE_UNDERSCORE	.\include\stb_truetype.h	1029;"	d
STBTT_MAC_EID_ARABIC	.\include\stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon38
STBTT_MAC_EID_CHINESE_TRAD	.\include\stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon38
STBTT_MAC_EID_GREEK	.\include\stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon38
STBTT_MAC_EID_HEBREW	.\include\stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon38
STBTT_MAC_EID_JAPANESE	.\include\stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon38
STBTT_MAC_EID_KOREAN	.\include\stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon38
STBTT_MAC_EID_ROMAN	.\include\stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon38
STBTT_MAC_EID_RUSSIAN	.\include\stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon38
STBTT_MAC_LANG_ARABIC	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon40
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon40
STBTT_MAC_LANG_CHINESE_TRAD	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon40
STBTT_MAC_LANG_DUTCH	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon40
STBTT_MAC_LANG_ENGLISH	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon40
STBTT_MAC_LANG_FRENCH	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon40
STBTT_MAC_LANG_GERMAN	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon40
STBTT_MAC_LANG_HEBREW	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon40
STBTT_MAC_LANG_ITALIAN	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon40
STBTT_MAC_LANG_JAPANESE	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon40
STBTT_MAC_LANG_KOREAN	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon40
STBTT_MAC_LANG_RUSSIAN	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon40
STBTT_MAC_LANG_SPANISH	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon40
STBTT_MAC_LANG_SWEDISH	.\include\stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon40
STBTT_MAX_OVERSAMPLE	.\include\stb_truetype.h	1109;"	d
STBTT_MS_EID_SHIFTJIS	.\include\stb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon37
STBTT_MS_EID_SYMBOL	.\include\stb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon37
STBTT_MS_EID_UNICODE_BMP	.\include\stb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon37
STBTT_MS_EID_UNICODE_FULL	.\include\stb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon37
STBTT_MS_LANG_CHINESE	.\include\stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon39
STBTT_MS_LANG_DUTCH	.\include\stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon39
STBTT_MS_LANG_ENGLISH	.\include\stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon39
STBTT_MS_LANG_FRENCH	.\include\stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon39
STBTT_MS_LANG_GERMAN	.\include\stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon39
STBTT_MS_LANG_HEBREW	.\include\stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon39
STBTT_MS_LANG_ITALIAN	.\include\stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon39
STBTT_MS_LANG_JAPANESE	.\include\stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon39
STBTT_MS_LANG_KOREAN	.\include\stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon39
STBTT_MS_LANG_RUSSIAN	.\include\stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon39
STBTT_MS_LANG_SPANISH	.\include\stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon39
STBTT_MS_LANG_SWEDISH	.\include\stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon39
STBTT_PLATFORM_ID_ISO	.\include\stb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon35
STBTT_PLATFORM_ID_MAC	.\include\stb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon35
STBTT_PLATFORM_ID_MICROSOFT	.\include\stb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon35
STBTT_PLATFORM_ID_UNICODE	.\include\stb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon35
STBTT_POINT_SIZE	.\include\stb_truetype.h	602;"	d
STBTT_RASTERIZER_VERSION	.\include\stb_truetype.h	1119;"	d
STBTT_UNICODE_EID_ISO_10646	.\include\stb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon36
STBTT_UNICODE_EID_UNICODE_1_0	.\include\stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon36
STBTT_UNICODE_EID_UNICODE_1_1	.\include\stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon36
STBTT_UNICODE_EID_UNICODE_2_0_BMP	.\include\stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon36
STBTT_UNICODE_EID_UNICODE_2_0_FULL	.\include\stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon36
STBTT__COMPARE	.\include\stb_truetype.h	3397;"	d
STBTT__CSCTX_INIT	.\include\stb_truetype.h	1909;"	d
STBTT__CSERR	.\include\stb_truetype.h	2018;"	d
STBTT__CSERR	.\include\stb_truetype.h	2266;"	d
STBTT__NOTUSED	.\include\stb_truetype.h	1123;"	d
STBTT__NOTUSED	.\include\stb_truetype.h	1125;"	d
STBTT__OVER_MASK	.\include\stb_truetype.h	4010;"	d
STBTT_acos	.\include\stb_truetype.h	460;"	d
STBTT_assert	.\include\stb_truetype.h	477;"	d
STBTT_cos	.\include\stb_truetype.h	459;"	d
STBTT_fabs	.\include\stb_truetype.h	465;"	d
STBTT_fmod	.\include\stb_truetype.h	454;"	d
STBTT_free	.\include\stb_truetype.h	472;"	d
STBTT_iceil	.\include\stb_truetype.h	443;"	d
STBTT_ifloor	.\include\stb_truetype.h	442;"	d
STBTT_malloc	.\include\stb_truetype.h	471;"	d
STBTT_max	.\include\stb_truetype.h	4396;"	d
STBTT_memcpy	.\include\stb_truetype.h	487;"	d
STBTT_memset	.\include\stb_truetype.h	488;"	d
STBTT_min	.\include\stb_truetype.h	4395;"	d
STBTT_pow	.\include\stb_truetype.h	449;"	d
STBTT_sqrt	.\include\stb_truetype.h	448;"	d
STBTT_strlen	.\include\stb_truetype.h	482;"	d
STBTT_vcubic	.\include\stb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon32
STBTT_vcurve	.\include\stb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon32
STBTT_vline	.\include\stb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon32
STBTT_vmove	.\include\stb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon32
STB_IMAGE_IMPLEMENTATION	.\game.cpp	17;"	d	file:
STB_INCLUDE_STB_RECT_PACK_H	.\include\stb_rect_pack.h	67;"	d
STB_RECT_PACK_IMPLEMENTATION	.\game.cpp	18;"	d	file:
STB_RECT_PACK_VERSION	.\include\stb_rect_pack.h	69;"	d
STB_SPRINTF_DECORATE	.\include\stb_sprintf.h	205;"	d
STB_SPRINTF_H_INCLUDE	.\include\stb_sprintf.h	30;"	d
STB_SPRINTF_IMPLEMENTATION	.\game.cpp	16;"	d	file:
STB_SPRINTF_IMPLEMENTATION	.\win32.cpp	10;"	d	file:
STB_SPRINTF_MIN	.\include\stb_sprintf.h	200;"	d
STB_SPRINTF_MSVC_MODE	.\include\stb_sprintf.h	242;"	d
STB_TRUETYPE_IMPLEMENTATION	.\game.cpp	19;"	d	file:
STRING_LENGTH	.\file_formats.h	/^enum STRING_LENGTH {$/;"	g
STRING_LENGTH_BLOB	.\file_formats.h	/^	STRING_LENGTH_BLOB = 12,$/;"	e	enum:STRING_LENGTH
STRING_LENGTH_FONT	.\file_formats.h	/^	STRING_LENGTH_FONT = 12,$/;"	e	enum:STRING_LENGTH
STRING_LENGTH_MESH	.\file_formats.h	/^	STRING_LENGTH_MESH = 12,$/;"	e	enum:STRING_LENGTH
STRING_LENGTH_TEXTURE	.\file_formats.h	/^	STRING_LENGTH_TEXTURE = 12,$/;"	e	enum:STRING_LENGTH
STRING_LENGTH_TEXTURE_TYPE	.\file_formats.h	/^	STRING_LENGTH_TEXTURE_TYPE = 12,$/;"	e	enum:STRING_LENGTH
STRING_LENGTH_VERTEX_BUFFER	.\file_formats.h	/^	STRING_LENGTH_VERTEX_BUFFER = 12,$/;"	e	enum:STRING_LENGTH
STRUCTURED_BINDING_SLOT	.\renderer.h	/^enum STRUCTURED_BINDING_SLOT {$/;"	g
STRUCTURED_BINDING_SLOT_Frame	.\renderer.h	/^	STRUCTURED_BINDING_SLOT_Frame$/;"	e	enum:STRUCTURED_BINDING_SLOT
ScreenSpaceShader	.\shader_code.h	/^char ScreenSpaceShader[] = R"FOO($/;"	v
SetBlendState	.\renderer.h	/^struct SetBlendState        { u8 type;              } ;$/;"	s
SetConstantsBuffer	.\renderer.h	/^struct SetConstantsBuffer { $/;"	s
SetDepthStencilState	.\renderer.h	/^struct SetDepthStencilState {$/;"	s
SetIndexBuffer	.\renderer.h	/^struct SetIndexBuffer { $/;"	s
SetPixelShader	.\renderer.h	/^struct SetPixelShader       { PixelShader* pixel;   } ;$/;"	s
SetPrimitiveTopology	.\renderer.h	/^struct SetPrimitiveTopology { u8 type;              } ;$/;"	s
SetRasterizerState	.\renderer.h	/^struct SetRasterizerState   { u8 type;              } ;$/;"	s
SetRenderTarget	.\renderer.h	/^struct SetRenderTarget{$/;"	s
SetSamplerState	.\renderer.h	/^struct SetSamplerState {$/;"	s
SetStructuredBuffer	.\renderer.h	/^struct SetStructuredBuffer { $/;"	s
SetTextureBuffer	.\renderer.h	/^struct SetTextureBuffer {$/;"	s
SetVertexBuffer	.\renderer.h	/^struct SetVertexBuffer { $/;"	s
SetVertexShader	.\renderer.h	/^struct SetVertexShader      { VertexShader* vertex; } ;$/;"	s
SetViewport	.\renderer.h	/^struct SetViewport { $/;"	s
SpawnEntitySpawner	.\simulation.cpp	/^SpawnEntitySpawner(SpawnerInfo* info, GameState* game_state) {$/;"	f	file:
SpawnInfo	.\simulation.h	/^struct SpawnInfo {$/;"	s
SpawnLevelBoundary	.\simulation.cpp	/^SpawnLevelBoundary(BoundingBox box, GameState* game_state) {$/;"	f	file:
SpawnMine	.\simulation.cpp	/^SpawnMine(Transform transform, GameState* game_state) {$/;"	f	file:
SpawnParticleSystem	.\simulation.cpp	/^SpawnParticleSystem(ParticleSystem* particle_system, GameState* game_state) {$/;"	f	file:
SpawnPlayer	.\simulation.cpp	/^SpawnPlayer(Transform transform, GameState* game_state) {$/;"	f	file:
SpawnerInfo	.\simulation.h	/^struct SpawnerInfo {$/;"	s
StringCompare	.\memory_management.h	/^StringCompare(char* left, char* right) {$/;"	f
StringLength	.\memory_management.h	/^StringLength(char* string) {$/;"	f
StructuredBuffer	.\renderer.h	/^struct StructuredBuffer {$/;"	s
TEAL	.\math.h	125;"	d
TEAM	.\simulation.h	/^enum TEAM { TEAM_NONE, TEAM_PLAYER, TEAM_ENEMY, TEAM_TOTAL };$/;"	g
TEAM_ENEMY	.\simulation.h	/^enum TEAM { TEAM_NONE, TEAM_PLAYER, TEAM_ENEMY, TEAM_TOTAL };$/;"	e	enum:TEAM
TEAM_NONE	.\simulation.h	/^enum TEAM { TEAM_NONE, TEAM_PLAYER, TEAM_ENEMY, TEAM_TOTAL };$/;"	e	enum:TEAM
TEAM_PLAYER	.\simulation.h	/^enum TEAM { TEAM_NONE, TEAM_PLAYER, TEAM_ENEMY, TEAM_TOTAL };$/;"	e	enum:TEAM
TEAM_TOTAL	.\simulation.h	/^enum TEAM { TEAM_NONE, TEAM_PLAYER, TEAM_ENEMY, TEAM_TOTAL };$/;"	e	enum:TEAM
TEXTURE_BINDING_SLOT	.\renderer.h	/^enum TEXTURE_BINDING_SLOT {$/;"	g
TEXTURE_BINDING_SLOT_ALBEDO	.\renderer.h	/^	TEXTURE_BINDING_SLOT_ALBEDO,$/;"	e	enum:TEXTURE_BINDING_SLOT
TEXTURE_BINDING_SLOT_NORMAL	.\renderer.h	/^	TEXTURE_BINDING_SLOT_NORMAL$/;"	e	enum:TEXTURE_BINDING_SLOT
TEXTURE_SLOT	.\asset_formats.h	/^enum TEXTURE_SLOT {$/;"	g
TEXTURE_SLOT_DIFFUSE	.\asset_formats.h	/^	TEXTURE_SLOT_DIFFUSE,$/;"	e	enum:TEXTURE_SLOT
TEXTURE_SLOT_NORMAL	.\asset_formats.h	/^	TEXTURE_SLOT_NORMAL,$/;"	e	enum:TEXTURE_SLOT
TEXTURE_SLOT_TOTAL	.\asset_formats.h	/^	TEXTURE_SLOT_TOTAL,$/;"	e	enum:TEXTURE_SLOT
TemporaryMemory	.\memory_management.h	/^struct TemporaryMemory {$/;"	s
Terabytes	.\base_types.h	34;"	d
TestMode	.\game_mode.h	/^struct TestMode {$/;"	s
Tetra	.\tetra.cpp	/^struct Tetra {$/;"	s	file:
TextShader	.\shader_code.h	/^	char TextShader[] = R"FOO($/;"	v
TextUI	.\font_handling.cpp	/^struct TextUI {$/;"	s	file:
TextureAssetInfo	.\asset_info.h	/^struct TextureAssetInfo {$/;"	s
TextureBuffer	.\renderer.h	/^struct TextureBuffer {$/;"	s
TextureData	.\asset_formats.h	/^struct TextureData {$/;"	s
TextureFormat	.\file_formats.h	/^struct TextureFormat {$/;"	s
TexturedQuad	.\quad_renderer.cpp	/^struct TexturedQuad {$/;"	s	file:
TexturedQuadShader	.\shader_code.h	/^char TexturedQuadShader[] = R"FOO($/;"	v
TexturesBlob	.\file_formats.h	/^struct TexturesBlob {$/;"	s
Timer	.\timer.h	/^struct Timer {$/;"	s
Transform	.\math.h	/^struct Transform {$/;"	s
TransformI	.\math.h	/^static Transform TransformI() { return Transform { V3Z(), QuatI(), V3I() }; }$/;"	f
U16Max	.\base_types.h	20;"	d
U32Max	.\base_types.h	24;"	d
U32Min	.\base_types.h	23;"	d
U64Max	.\base_types.h	25;"	d
U8Max	.\base_types.h	19;"	d
UICachedData	.\ui_renderer.cpp	/^struct UICachedData {$/;"	s	file:
UIData	.\ui_renderer.cpp	/^struct UIData {$/;"	s	file:
UIDimension	.\ui_renderer.cpp	/^struct UIDimension {$/;"	s	file:
UIElement	.\ui_renderer.cpp	/^struct UIElement {$/;"	s	file:
UIGenerateData	.\ui_renderer.cpp	/^UIGenerateData(Input* input, UIRenderer* ui_renderer) {$/;"	f	file:
UIOperateElement	.\ui_renderer.cpp	/^UIOperateElement(Vec2 mouse_pos, Vec2 mouse_del, bool held, UIElement* element, UIElement* parent, UIData* data, UIRenderer* ui_renderer) {$/;"	f	file:
UIRenderElements	.\ui_renderer.cpp	/^UIRenderElements(UIRenderer* ui_renderer, Renderer* renderer) {$/;"	f	file:
UIRenderer	.\ui_renderer.cpp	/^struct UIRenderer {$/;"	s	file:
UIRendererFrame	.\ui_renderer.cpp	/^UIRendererFrame(Input* input, UIRenderer* ui_renderer, Renderer* renderer) {$/;"	f	file:
UIShader	.\shader_code.h	/^char UIShader[] = R"FOO($/;"	v
UITextFrame	.\font_handling.cpp	/^UITextFrame(TextUI* text_ui, WindowDimensions wd, Renderer* renderer) {$/;"	f	file:
UI_FAB	.\ui_renderer.cpp	/^enum UI_FAB {$/;"	g	file:
UI_FAB_Button	.\ui_renderer.cpp	/^	UI_FAB_Button,$/;"	e	enum:UI_FAB	file:
UI_FAB_Overlay	.\ui_renderer.cpp	/^	UI_FAB_Overlay,$/;"	e	enum:UI_FAB	file:
UI_FAB_Text	.\ui_renderer.cpp	/^	UI_FAB_Text,$/;"	e	enum:UI_FAB	file:
UI_FLAG	.\ui_renderer.cpp	/^enum UI_FLAG {$/;"	g	file:
UI_FLAG_Hover	.\ui_renderer.cpp	/^	UI_FLAG_Hover   = 1<<1,$/;"	e	enum:UI_FLAG	file:
UI_FLAG_Movable	.\ui_renderer.cpp	/^	UI_FLAG_Movable = 1<<3,$/;"	e	enum:UI_FLAG	file:
UI_FLAG_Press	.\ui_renderer.cpp	/^	UI_FLAG_Press   = 1<<2,$/;"	e	enum:UI_FLAG	file:
UI_FLAG_Text	.\ui_renderer.cpp	/^	UI_FLAG_Text    = 1<<4,$/;"	e	enum:UI_FLAG	file:
UpdateBoundingBox	.\simulation.cpp	/^UpdateBoundingBox(BoundingBox* box, Transform* transform) {$/;"	f	file:
UpdateEntities	.\simulation.cpp	/^UpdateEntities(GameState* game_state, Input* input) {$/;"	f	file:
UpdateTestMode	.\game_mode.cpp	/^UpdateTestMode(GameState* game_state, Input* input, WindowDimensions wd) {$/;"	f	file:
UpdateTetra	.\tetra.cpp	/^UpdateTetra(Tetra* tetra) {$/;"	f	file:
UpdateTransform	.\simulation.cpp	/^UpdateTransform(Transform* inout, Transform var) {$/;"	f	file:
UploadAllMeshAssets	.\asset_info.cpp	/^UploadAllMeshAssets(GameAssets* assets, Renderer* renderer) {$/;"	f	file:
UploadAllTextureAssets	.\asset_info.cpp	/^UploadAllTextureAssets(GameAssets* assets, Renderer* renderer) {$/;"	f	file:
UploadConstantsBuffer	.\renderer.cpp	/^UploadConstantsBuffer(u32 size, Renderer* renderer) {$/;"	f	file:
UploadIndexBuffer	.\renderer.cpp	/^UploadIndexBuffer(void* data, u32 count, Renderer* renderer) {$/;"	f	file:
UploadPixelShader	.\renderer.cpp	/^UploadPixelShader(char* code, u32 length, char* entry, Renderer* renderer) {$/;"	f	file:
UploadStructuredBuffer	.\renderer.cpp	/^UploadStructuredBuffer(u32 struct_size, u32 count, Renderer* renderer) {$/;"	f	file:
UploadTexture	.\renderer.cpp	/^UploadTexture(void* data, u32 width, u32 height, u8 num_components, bool dynamic, bool temp, Renderer* renderer) {$/;"	f	file:
UploadVertexBuffer	.\renderer.cpp	/^UploadVertexBuffer(void* initial_data, u32 num_vertices, u8 num_components, bool dynamic, Renderer* renderer) {$/;"	f	file:
UploadVertexShader	.\renderer.cpp	/^UploadVertexShader(char* code, u32 length, char* entry, VERTEX_BUFFER* vertex_buffers, u8 count, Renderer* renderer) {$/;"	f	file:
V2	.\math.h	/^static Vec2 V2(float x, float y) { return Vec2 { x, y }; }$/;"	f
V2Add	.\math.h	/^static Vec2 V2Add(Vec2 left, Vec2 right) {$/;"	f
V2AddF	.\math.h	/^static Vec2 V2AddF(Vec2 left, float scalar) {$/;"	f
V2Div	.\math.h	/^static Vec2 V2Div(Vec2 left, Vec2 right) {$/;"	f
V2DivF	.\math.h	/^static Vec2 V2DivF(Vec2 left, float scalar) {$/;"	f
V2Dot	.\math.h	/^static float V2Dot(Vec2 left, Vec2 right) {$/;"	f
V2I	.\math.h	/^static Vec2 V2I() { return Vec2 { 1.0f, 1.0f }; }$/;"	f
V2Mul	.\math.h	/^static Vec2 V2Mul(Vec2 left, Vec2 right) {$/;"	f
V2MulF	.\math.h	/^static Vec2 V2MulF(Vec2 left, float scalar) {$/;"	f
V2Sub	.\math.h	/^static Vec2 V2Sub(Vec2 left, Vec2 right) {$/;"	f
V2SubF	.\math.h	/^static Vec2 V2SubF(Vec2 left, float scalar) {$/;"	f
V2Z	.\math.h	/^static Vec2 V2Z() { return Vec2 { 0.0f, 0.0f }; }$/;"	f
V3	.\math.h	/^static Vec3 V3(float x, float y, float z) { return Vec3 { x, y, z }; }$/;"	f
V3Add	.\math.h	/^static Vec3 V3Add(Vec3 left, Vec3 right) { $/;"	f
V3AddF	.\math.h	/^static Vec3 V3AddF(Vec3 left, float scalar) {$/;"	f
V3Cross	.\math.h	/^static Vec3 V3Cross(Vec3 left, Vec3 right) {$/;"	f
V3Div	.\math.h	/^static Vec3 V3Div(Vec3 left, Vec3 right) {$/;"	f
V3DivF	.\math.h	/^static Vec3 V3DivF(Vec3 left, float scalar) {$/;"	f
V3Dot	.\math.h	/^static float V3Dot(Vec3 left, Vec3 right) {$/;"	f
V3Forward	.\math.h	/^static Vec3 V3Forward() { return Vec3 { 0.0f, 0.0f, 1.0f }; }$/;"	f
V3I	.\math.h	/^static Vec3 V3I() { return Vec3 { 1.0f, 1.0f, 1.0f }; }$/;"	f
V3Mag	.\math.h	/^static float V3Mag(Vec3 vec) {$/;"	f
V3MagSquared	.\math.h	/^static float V3MagSquared(Vec3 vec) {$/;"	f
V3Mul	.\math.h	/^static Vec3 V3Mul(Vec3 left, Vec3 right) {$/;"	f
V3MulF	.\math.h	/^static Vec3 V3MulF(Vec3 left, float scalar) {$/;"	f
V3Neg	.\math.h	/^static Vec3 V3Neg(Vec3 vec) { return V3Sub(V3Z(), vec); }$/;"	f
V3Norm	.\math.h	/^static Vec3 V3Norm(Vec3 vec) {$/;"	f
V3Right	.\math.h	/^static Vec3 V3Right() { return Vec3 { 1.0f, 0.0f, 0.0f }; }$/;"	f
V3Sub	.\math.h	/^static Vec3 V3Sub(Vec3 left, Vec3 right) {$/;"	f
V3SubF	.\math.h	/^static Vec3 V3SubF(Vec3 left, float scalar) {$/;"	f
V3Up	.\math.h	/^static Vec3 V3Up() { return Vec3 { 0.0f, 1.0f, 0.0f }; }$/;"	f
V3Z	.\math.h	/^static Vec3 V3Z() { return Vec3 { 0.0f, 0.0f, 0.0f }; }$/;"	f
V4	.\math.h	/^static Vec4 V4(float x, float y, float z, float w) { return Vec4 { x, y, z, w }; }$/;"	f
V4FromV3	.\math.h	/^static Vec4 V4FromV3(Vec3 xyz, float w) { return Vec4 { xyz.x, xyz.y, xyz.z, w }; }$/;"	f
V4I	.\math.h	/^static Vec4 V4I() { return Vec4 { 1.0f, 1.0f, 1.0f, 1.0f }; }$/;"	f
V4Z	.\math.h	/^static Vec4 V4Z() { return Vec4 { 0.0f, 0.0f, 0.0f, 0.0f }; }$/;"	f
VERTEX_BUFFER	.\asset_formats.h	/^enum VERTEX_BUFFER {	$/;"	g
VERTEX_BUFFER_COLOR	.\asset_formats.h	/^	VERTEX_BUFFER_COLOR, $/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_NORMAL	.\asset_formats.h	/^	VERTEX_BUFFER_NORMAL, $/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_NOT_SET	.\asset_formats.h	/^	VERTEX_BUFFER_NOT_SET,$/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_POSITION	.\asset_formats.h	/^	VERTEX_BUFFER_POSITION, $/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_TANGENT	.\asset_formats.h	/^	VERTEX_BUFFER_TANGENT,$/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_TEXCOORD	.\asset_formats.h	/^	VERTEX_BUFFER_TEXCOORD, $/;"	e	enum:VERTEX_BUFFER
VERTEX_BUFFER_TOTAL	.\asset_formats.h	/^	VERTEX_BUFFER_TOTAL$/;"	e	enum:VERTEX_BUFFER
Vec2	.\math.h	/^struct Vec2 {$/;"	s
Vec2u	.\math.h	/^struct Vec2u {$/;"	s
Vec3	.\math.h	/^struct Vec3 {$/;"	s
Vec3Equals	.\math.h	/^static bool Vec3Equals(Vec3 left, Vec3 right) {$/;"	f
Vec4	.\math.h	/^struct Vec4 {$/;"	s
VertexBuffer	.\renderer.h	/^struct VertexBuffer    { ID3D11Buffer* buffer; };$/;"	s
VertexBufferData	.\asset_formats.h	/^struct VertexBufferData {$/;"	s
VertexBufferFormat	.\file_formats.h	/^struct VertexBufferFormat {$/;"	s
VertexShader	.\renderer.h	/^struct VertexShader {$/;"	s
WHITE	.\math.h	118;"	d
WIN32_AXIS	.\platform_api.h	/^enum WIN32_AXIS {$/;"	g
WIN32_AXIS_MOUSE	.\platform_api.h	/^	WIN32_AXIS_MOUSE,$/;"	e	enum:WIN32_AXIS
WIN32_AXIS_MOUSE_DEL	.\platform_api.h	/^	WIN32_AXIS_MOUSE_DEL,$/;"	e	enum:WIN32_AXIS
WIN32_AXIS_TOTAL	.\platform_api.h	/^	WIN32_AXIS_TOTAL$/;"	e	enum:WIN32_AXIS
WIN32_BUTTON	.\platform_api.h	/^enum WIN32_BUTTON {$/;"	g
WIN32_BUTTON_0	.\platform_api.h	/^	WIN32_BUTTON_0,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_1	.\platform_api.h	/^	WIN32_BUTTON_1,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_2	.\platform_api.h	/^	WIN32_BUTTON_2,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_3	.\platform_api.h	/^	WIN32_BUTTON_3,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_4	.\platform_api.h	/^	WIN32_BUTTON_4,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_5	.\platform_api.h	/^	WIN32_BUTTON_5,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_6	.\platform_api.h	/^	WIN32_BUTTON_6,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_7	.\platform_api.h	/^	WIN32_BUTTON_7,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_8	.\platform_api.h	/^	WIN32_BUTTON_8,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_9	.\platform_api.h	/^	WIN32_BUTTON_9,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_A	.\platform_api.h	/^	WIN32_BUTTON_A,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_ALT	.\platform_api.h	/^	WIN32_BUTTON_ALT,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_B	.\platform_api.h	/^	WIN32_BUTTON_B,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_C	.\platform_api.h	/^	WIN32_BUTTON_C,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_CTRL	.\platform_api.h	/^	WIN32_BUTTON_CTRL,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_D	.\platform_api.h	/^	WIN32_BUTTON_D,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_DOWN	.\platform_api.h	/^	WIN32_BUTTON_DOWN,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_E	.\platform_api.h	/^	WIN32_BUTTON_E,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_ENTER	.\platform_api.h	/^	WIN32_BUTTON_ENTER,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_ESC	.\platform_api.h	/^	WIN32_BUTTON_ESC,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F	.\platform_api.h	/^	WIN32_BUTTON_F,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F0	.\platform_api.h	/^	WIN32_BUTTON_F0,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F1	.\platform_api.h	/^	WIN32_BUTTON_F1,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F10	.\platform_api.h	/^	WIN32_BUTTON_F10,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F11	.\platform_api.h	/^	WIN32_BUTTON_F11,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F12	.\platform_api.h	/^	WIN32_BUTTON_F12,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F2	.\platform_api.h	/^	WIN32_BUTTON_F2,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F3	.\platform_api.h	/^	WIN32_BUTTON_F3,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F4	.\platform_api.h	/^	WIN32_BUTTON_F4,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F5	.\platform_api.h	/^	WIN32_BUTTON_F5,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F6	.\platform_api.h	/^	WIN32_BUTTON_F6,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F7	.\platform_api.h	/^	WIN32_BUTTON_F7,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F8	.\platform_api.h	/^	WIN32_BUTTON_F8,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_F9	.\platform_api.h	/^	WIN32_BUTTON_F9,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_G	.\platform_api.h	/^	WIN32_BUTTON_G,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_H	.\platform_api.h	/^	WIN32_BUTTON_H,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_I	.\platform_api.h	/^	WIN32_BUTTON_I,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_J	.\platform_api.h	/^	WIN32_BUTTON_J,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_L	.\platform_api.h	/^	WIN32_BUTTON_L,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_LEFT	.\platform_api.h	/^	WIN32_BUTTON_LEFT,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_LEFT_MOUSE	.\platform_api.h	/^	WIN32_BUTTON_LEFT_MOUSE,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_M	.\platform_api.h	/^	WIN32_BUTTON_M,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_MIDDLE_MOUSE	.\platform_api.h	/^	WIN32_BUTTON_MIDDLE_MOUSE,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_N	.\platform_api.h	/^	WIN32_BUTTON_N,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_O	.\platform_api.h	/^	WIN32_BUTTON_O,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_P	.\platform_api.h	/^	WIN32_BUTTON_P,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_Q	.\platform_api.h	/^	WIN32_BUTTON_Q,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_R	.\platform_api.h	/^	WIN32_BUTTON_R,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_RIGHT	.\platform_api.h	/^	WIN32_BUTTON_RIGHT,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_RIGHT_MOUSE	.\platform_api.h	/^	WIN32_BUTTON_RIGHT_MOUSE,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_S	.\platform_api.h	/^	WIN32_BUTTON_S,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_SHIFT	.\platform_api.h	/^	WIN32_BUTTON_SHIFT,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_SPACE	.\platform_api.h	/^	WIN32_BUTTON_SPACE,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_T	.\platform_api.h	/^	WIN32_BUTTON_T,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_TAB	.\platform_api.h	/^	WIN32_BUTTON_TAB,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_TOTAL	.\platform_api.h	/^	WIN32_BUTTON_TOTAL$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_U	.\platform_api.h	/^	WIN32_BUTTON_U,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_UP	.\platform_api.h	/^	WIN32_BUTTON_UP,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_V	.\platform_api.h	/^	WIN32_BUTTON_V,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_W	.\platform_api.h	/^	WIN32_BUTTON_W,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_X	.\platform_api.h	/^	WIN32_BUTTON_X,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_Y	.\platform_api.h	/^	WIN32_BUTTON_Y,$/;"	e	enum:WIN32_BUTTON
WIN32_BUTTON_Z	.\platform_api.h	/^	WIN32_BUTTON_Z,$/;"	e	enum:WIN32_BUTTON
Win32DLL	.\win32.h	/^struct Win32DLL { \/\/ InOut struct$/;"	s
Win32GameFunctionTable	.\win32.h	/^struct Win32GameFunctionTable {$/;"	s
Win32GetLastWriteTime	.\win32.cpp	/^Win32GetLastWriteTime(char* absfilepath) {$/;"	f	file:
Win32GetSecondsElapsed	.\win32.cpp	/^Win32GetSecondsElapsed(LARGE_INTEGER Start, LARGE_INTEGER End)$/;"	f	file:
Win32GetWallClock	.\win32.cpp	/^Win32GetWallClock(void) {    $/;"	f	file:
Win32GetWindowDimensions	.\win32.cpp	/^Win32GetWindowDimensions(HWND window) {$/;"	f	file:
Win32HasDLLChanged	.\win32.cpp	/^Win32HasDLLChanged(Win32DLL* code) {$/;"	f	file:
Win32LoadDLL	.\win32.cpp	/^Win32LoadDLL(Win32State* state, Win32DLL* code) {$/;"	f	file:
Win32MainWindowCallback	.\win32.cpp	/^Win32MainWindowCallback(HWND window, UINT msg, WPARAM wparam, LPARAM lparam) {$/;"	f	file:
Win32MakeTempDLLAbsFilePath	.\win32.cpp	/^Win32MakeTempDLLAbsFilePath(Win32State* state, Win32DLL* code, char* dst) {$/;"	f	file:
Win32MemoryBlock	.\win32.h	/^struct Win32MemoryBlock {$/;"	s
Win32PreProcessButton	.\win32.cpp	/^Win32PreProcessButton(Button* button) {$/;"	f	file:
Win32PreProcessMouseMove	.\win32.cpp	/^Win32PreProcessMouseMove(Input* input) {$/;"	f	file:
Win32ProcessButton	.\win32.cpp	/^Win32ProcessButton(Button* button, bool is_down) {$/;"	f	file:
Win32ProcessButtonInput	.\win32.cpp	/^Win32ProcessButtonInput(MSG msg, Input* input) {$/;"	f	file:
Win32ReloadDLL	.\win32.cpp	/^Win32ReloadDLL(Win32State* state, Win32DLL* code) {$/;"	f	file:
Win32State	.\win32.h	/^struct Win32State {$/;"	s
Win32UnloadDLL	.\win32.cpp	/^Win32UnloadDLL(Win32DLL* code) {$/;"	f	file:
Win32Window	.\platform_api.h	/^struct Win32Window {$/;"	s
WinMain	.\win32.cpp	/^WinMain(HINSTANCE instance, HINSTANCE prev_instance, LPSTR cmdline, int show_code) {$/;"	f
WindowDimensions	.\platform_api.h	/^struct WindowDimensions { u32 width; u32 height; };$/;"	s
YCbCr_to_RGB_kernel	.\include\stb_image.h	/^			void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon11
YELLOW	.\math.h	135;"	d
ZeroArray	.\memory_management.h	2;"	d
ZeroMem	.\memory_management.h	/^static void ZeroMem(void* ptr, u64 size) {$/;"	f
ZeroStruct	.\memory_management.h	1;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	.\include\stb_truetype.h	500;"	d
absfilepath	.\win32.h	/^	char* absfilepath;$/;"	m	struct:Win32DLL
acceleration	.\simulation.h	/^	float acceleration;$/;"	m	struct:Entity
active_head	.\include\stb_rect_pack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context
advance	.\include\stb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry
align	.\include\stb_rect_pack.h	/^   int align;$/;"	m	struct:stbrp_context
all_a	.\include\stb_image.h	/^			unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon19
allocate_memory	.\platform_api.h	/^	PlatformAllocateMemory* allocate_memory;$/;"	m	struct:PlatformAPI
ambience	.\mesh_renderer.cpp	/^	float ambience;$/;"	m	struct:LightInfo	file:
app14_color_transform	.\include\stb_image.h	/^			int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon11
arena	.\memory_management.h	/^	MemoryArena* arena;$/;"	m	struct:TemporaryMemory
array_of_unicode_codepoints	.\include\stb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon31
aspect_ratio	.\camera.cpp	/^			float aspect_ratio;$/;"	m	struct:Camera::__anon1::__anon2	file:
assets	.\game.h	/^	GameAssets* assets;$/;"	m	struct:GameState
attack_damage	.\simulation.h	/^	u32 attack_damage;$/;"	m	struct:Entity
axes	.\platform_api.h	/^	Axis axes[WIN32_AXIS_TOTAL];$/;"	m	struct:Input
backbuffer	.\renderer.h	/^	RenderTarget backbuffer;	\/\/ d3d11 api swaps buffers behind your back and internally remaps it$/;"	m	struct:Renderer
background	.\include\stb_image.h	/^			stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anon22
base_sens	.\camera.cpp	/^	float base_sens;$/;"	m	struct:FPControlInfo	file:
bb_mesh_space	.\simulation.h	/^	BoundingBox bb_mesh_space; $/;"	m	struct:Entity
bb_object_space	.\simulation.h	/^	BoundingBox bb_object_space; $/;"	m	struct:Entity
bb_orientation	.\simulation.h	/^	u8 bb_orientation;$/;"	m	struct:Entity
bgindex	.\include\stb_image.h	/^			int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon22
bits_per_channel	.\include\stb_image.h	/^	int bits_per_channel;$/;"	m	struct:__anon8
bl	.\shapes.cpp	/^			Vec3 bl;$/;"	m	struct:Quad::__anon57::__anon58	file:
blend_states	.\quad_renderer.cpp	/^	u8 blend_states[MAX_TEXTURED_QUADS];$/;"	m	struct:QuadRenderer	file:
blend_states	.\renderer.h	/^	ID3D11BlendState* blend_states[BLEND_STATE_TOTAL];$/;"	m	struct:Renderer
blob_names	.\file_formats.h	/^char* blob_names[ASSET_BLOB_TOTAL] = {$/;"	v
block	.\memory_management.h	/^	PlatformMemoryBlock* block;$/;"	m	struct:TemporaryMemory
block	.\win32.h	/^	PlatformMemoryBlock block;$/;"	m	struct:Win32MemoryBlock
block_pitch	.\camera.cpp	/^	bool block_pitch;$/;"	m	struct:FPControlInfo	file:
block_yaw	.\camera.cpp	/^	bool block_yaw;$/;"	m	struct:FPControlInfo	file:
bottom	.\camera.cpp	/^			float bottom;$/;"	m	struct:Camera::__anon1::__anon3	file:
bottom_y	.\include\stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon43
bounds	.\include\stb_truetype.h	/^   int bounds;$/;"	m	struct:__anon41
bp	.\platform_api.h	/^	u8* bp;$/;"	m	struct:PlatformMemoryBlock
bpp	.\include\stb_image.h	/^			int bpp, offset, hsz;$/;"	m	struct:__anon19
br	.\shapes.cpp	/^			Vec3 br;$/;"	m	struct:Quad::__anon57::__anon58	file:
buf	.\include\stb_sprintf.h	/^   char *buf;$/;"	m	struct:stbsp__context
buffer	.\asset_info.h	/^	TextureBuffer* buffer;$/;"	m	struct:TextureAssetInfo
buffer	.\renderer.h	/^	ID3D11Buffer* buffer;$/;"	m	struct:StructuredBuffer
buffer	.\renderer.h	/^	ID3D11Texture2D* buffer;$/;"	m	struct:TextureBuffer
buffer	.\renderer.h	/^	void* buffer;$/;"	m	struct:FreeRenderResource
buffer	.\renderer.h	/^	void* buffer;$/;"	m	struct:PushRenderBufferData
buffer	.\renderer.h	/^struct ConstantsBuffer { ID3D11Buffer* buffer; };$/;"	m	struct:ConstantsBuffer
buffer	.\renderer.h	/^struct IndexBuffer     { ID3D11Buffer* buffer; };$/;"	m	struct:IndexBuffer
buffer	.\renderer.h	/^struct VertexBuffer    { ID3D11Buffer* buffer; };$/;"	m	struct:VertexBuffer
buffer_start	.\include\stb_image.h	/^		stbi_uc buffer_start[128];$/;"	m	struct:__anon6
buflen	.\include\stb_image.h	/^		int buflen;$/;"	m	struct:__anon6
buttons	.\platform_api.h	/^	Button buttons[WIN32_BUTTON_TOTAL];$/;"	m	struct:Input
cache_arena	.\ui_renderer.cpp	/^	MemoryArena* cache_arena;$/;"	m	struct:UIRenderer	file:
cache_arena_temp	.\ui_renderer.cpp	/^	TemporaryMemory cache_arena_temp;$/;"	m	struct:UIRenderer	file:
cached_data	.\ui_renderer.cpp	/^	UICachedData* cached_data;$/;"	m	struct:UIRenderer	file:
callback_already_read	.\include\stb_image.h	/^		int callback_already_read;$/;"	m	struct:__anon6
camera	.\game.h	/^	Camera* camera;$/;"	m	struct:GameState
camera_constants	.\mesh_renderer.cpp	/^	ConstantsBuffer* camera_constants;$/;"	m	struct:MeshRenderer	file:
camera_constants	.\quad_renderer.cpp	/^	ConstantsBuffer* camera_constants;$/;"	m	struct:QuadRenderer	file:
cdata	.\include\stb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
cff	.\include\stb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo
channel	.\include\stb_image.h	/^			stbi_uc size,type,channel;$/;"	m	struct:__anon20
channel_order	.\include\stb_image.h	/^	int channel_order;$/;"	m	struct:__anon8
chardata_for_range	.\include\stb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon31
charstrings	.\include\stb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo
chase_target	.\simulation.h	/^	Vec3 chase_target;$/;"	m	struct:Entity
child	.\ui_renderer.cpp	/^	UIElement* child;$/;"	m	struct:UIElement	file:
close_file	.\platform_api.h	/^	PlatformCloseFile* close_file;$/;"	m	struct:PlatformAPI
code	.\include\stb_image.h	/^			stbi__uint16 code[256];$/;"	m	struct:__anon10
code_bits	.\include\stb_image.h	/^			int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon11
code_buffer	.\include\stb_image.h	/^			stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon11
code_buffer	.\include\stb_image.h	/^		stbi__uint32 code_buffer;$/;"	m	struct:__anon15
codes	.\include\stb_image.h	/^			stbi__gif_lzw codes[8192];$/;"	m	struct:__anon22
coeff	.\include\stb_image.h	/^				short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon11::__anon12
coeff_h	.\include\stb_image.h	/^				int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon11::__anon12
coeff_w	.\include\stb_image.h	/^				int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon11::__anon12
color	.\font_handling.cpp	/^	Vec3 color;$/;"	m	struct:Glyph	file:
color	.\mesh_renderer.cpp	/^	Vec4 color;$/;"	m	struct:MeshInfo	file:
color	.\quad_renderer.cpp	/^	Vec4 color;$/;"	m	struct:RenderQuad	file:
color	.\renderer.h	/^	float color[4];$/;"	m	struct:ClearRenderTarget
color	.\tetra.cpp	/^	Vec4 color[MAX_TETRA];$/;"	m	struct:Tetra	file:
color_table	.\include\stb_image.h	/^			stbi_uc *color_table;$/;"	m	struct:__anon22
colors	.\ui_renderer.cpp	/^	Vec4 colors[4];$/;"	m	struct:UIData	file:
command_buffer_base	.\renderer.h	/^	u8* command_buffer_base;$/;"	m	struct:Renderer
command_buffer_cursor	.\renderer.h	/^	u8* command_buffer_cursor;$/;"	m	struct:Renderer
command_buffer_size	.\renderer.h	/^	u32 command_buffer_size;$/;"	m	struct:Renderer
constants	.\renderer.h	/^	ConstantsBuffer* constants;$/;"	m	struct:SetConstantsBuffer
context	.\renderer.h	/^	ID3D11DeviceContext* context; $/;"	m	struct:Renderer
count	.\asset_formats.h	/^	u8 count;$/;"	m	struct:MaterialData
count	.\include\stb_sprintf.h	/^   int count;$/;"	m	struct:stbsp__context
count	.\mesh_renderer.cpp	/^	u32 count;$/;"	m	struct:MeshRenderer	file:
count	.\tetra.cpp	/^	u32 count;$/;"	m	struct:Tetra	file:
cur_x	.\include\stb_image.h	/^			int cur_x, cur_y;$/;"	m	struct:__anon22
cur_y	.\include\stb_image.h	/^			int cur_x, cur_y;$/;"	m	struct:__anon22
current_block	.\memory_management.h	/^	PlatformMemoryBlock* current_block;$/;"	m	struct:MemoryArena
current_delta	.\simulation.h	/^	float current_delta;$/;"	m	struct:SpawnerInfo
current_positions	.\simulation.h	/^	Vec3 current_positions[MAX_PARTICLES];$/;"	m	struct:ParticleSystem
current_time	.\simulation.h	/^	float current_time;$/;"	m	struct:ParticleSystem
cursor	.\include\stb_truetype.h	/^   int cursor;$/;"	m	struct:__anon27
cursor	.\win32.h	/^	HCURSOR cursor;$/;"	m	struct:Win32State
cursor_clip_enabled	.\win32.h	/^	bool cursor_clip_enabled;$/;"	m	struct:Win32State
cursor_enabled	.\win32.h	/^	bool cursor_enabled;$/;"	m	struct:Win32State
cx	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
cx1	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
cy	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
cy1	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
damage_reduction	.\simulation.h	/^	u32 damage_reduction;$/;"	m	struct:Entity
data	.\asset_formats.h	/^	void* data;$/;"	m	struct:VertexBufferData
data	.\asset_info.h	/^	MeshData* data;$/;"	m	struct:MeshAssetInfo
data	.\asset_info.h	/^	TextureData* data;$/;"	m	struct:TextureAssetInfo
data	.\asset_loading.cpp	/^	u8* data;$/;"	m	struct:GameAssets	file:
data	.\include\stb_image.h	/^				stbi_uc *data;$/;"	m	struct:__anon11::__anon12
data	.\include\stb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
data	.\include\stb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon27
data	.\renderer.h	/^	void* data;$/;"	m	struct:PushRenderBufferData
data	.\ui_renderer.cpp	/^	UIData* data;  \/\/ Generated every frame$/;"	m	struct:UIRenderer	file:
dc_pred	.\include\stb_image.h	/^				int dc_pred;$/;"	m	struct:__anon11::__anon12
dct_bfly32o	.\include\stb_image.h	2531;"	d
dct_bfly32o	.\include\stb_image.h	2665;"	d
dct_bfly32o	.\include\stb_image.h	2717;"	d
dct_bfly32o	.\include\stb_image.h	2875;"	d
dct_const	.\include\stb_image.h	2503;"	d
dct_const	.\include\stb_image.h	2660;"	d
dct_interleave16	.\include\stb_image.h	2548;"	d
dct_interleave16	.\include\stb_image.h	2667;"	d
dct_interleave8	.\include\stb_image.h	2542;"	d
dct_interleave8	.\include\stb_image.h	2666;"	d
dct_long_mac	.\include\stb_image.h	2698;"	d
dct_long_mac	.\include\stb_image.h	2871;"	d
dct_long_mul	.\include\stb_image.h	2694;"	d
dct_long_mul	.\include\stb_image.h	2870;"	d
dct_pass	.\include\stb_image.h	2553;"	d
dct_pass	.\include\stb_image.h	2668;"	d
dct_pass	.\include\stb_image.h	2725;"	d
dct_pass	.\include\stb_image.h	2876;"	d
dct_rot	.\include\stb_image.h	2507;"	d
dct_rot	.\include\stb_image.h	2661;"	d
dct_trn16	.\include\stb_image.h	2785;"	d
dct_trn16	.\include\stb_image.h	2807;"	d
dct_trn32	.\include\stb_image.h	2786;"	d
dct_trn32	.\include\stb_image.h	2808;"	d
dct_trn64	.\include\stb_image.h	2787;"	d
dct_trn64	.\include\stb_image.h	2809;"	d
dct_trn8_16	.\include\stb_image.h	2831;"	d
dct_trn8_16	.\include\stb_image.h	2866;"	d
dct_trn8_32	.\include\stb_image.h	2832;"	d
dct_trn8_32	.\include\stb_image.h	2867;"	d
dct_trn8_8	.\include\stb_image.h	2830;"	d
dct_trn8_8	.\include\stb_image.h	2865;"	d
dct_wadd	.\include\stb_image.h	2521;"	d
dct_wadd	.\include\stb_image.h	2663;"	d
dct_wadd	.\include\stb_image.h	2707;"	d
dct_wadd	.\include\stb_image.h	2873;"	d
dct_widen	.\include\stb_image.h	2516;"	d
dct_widen	.\include\stb_image.h	2662;"	d
dct_widen	.\include\stb_image.h	2702;"	d
dct_widen	.\include\stb_image.h	2872;"	d
dct_wsub	.\include\stb_image.h	2526;"	d
dct_wsub	.\include\stb_image.h	2664;"	d
dct_wsub	.\include\stb_image.h	2712;"	d
dct_wsub	.\include\stb_image.h	2874;"	d
deallocate_memory	.\platform_api.h	/^	PlatformDeallocateMemory* deallocate_memory;$/;"	m	struct:PlatformAPI
debug_cursor_request	.\game_layer.h	/^	bool debug_cursor_request;$/;"	m	struct:GameLayer
default_depth_stencil_state	.\renderer.h	/^	ID3D11DepthStencilState* default_depth_stencil_state;$/;"	m	struct:Renderer
default_window_handle	.\win32.h	/^	HWND default_window_handle;$/;"	m	struct:Win32State
delay	.\include\stb_image.h	/^			int delay;$/;"	m	struct:__anon22
delta	.\include\stb_image.h	/^			int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon10
delta_times	.\simulation.h	/^	float delta_times[MAX_SPAWNS];$/;"	m	struct:SpawnerInfo
depth	.\include\stb_image.h	/^	int depth;$/;"	m	struct:__anon17
depth_stencil	.\renderer.h	/^	DepthStencil depth_stencil;	$/;"	m	struct:Renderer
depth_stencil	.\renderer.h	/^	DepthStencil* depth_stencil;$/;"	m	struct:ClearStencil
dequant	.\include\stb_image.h	/^			stbi__uint16 dequant[4][64];$/;"	m	struct:__anon11
dev_mode	.\game.h	/^	DEV_MODE dev_mode;$/;"	m	struct:GameState
device	.\renderer.h	/^	ID3D11Device* device;$/;"	m	struct:Renderer
dim	.\platform_api.h	/^	WindowDimensions dim;$/;"	m	struct:Win32Window
dim	.\renderer.h	/^	Vec2 dim;$/;"	m	struct:SetViewport
dimension	.\ui_renderer.cpp	/^	UIDimension dimension;$/;"	m	struct:UICachedData	file:
dimension	.\ui_renderer.cpp	/^	UIDimension dimension;$/;"	m	struct:UIElement	file:
direction	.\include\stb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge
direction	.\include\stb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge
dll	.\win32.h	/^	HMODULE dll;$/;"	m	struct:Win32DLL
dx	.\include\stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
eflags	.\include\stb_image.h	/^			int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon22
elem	.\math.h	/^		float elem[2];$/;"	m	union:Vec2::__anon47
elem	.\math.h	/^		float elem[3];$/;"	m	union:Vec3::__anon49
elem	.\math.h	/^		float elem[4];$/;"	m	union:Quat::__anon54
elem	.\math.h	/^		float elem[4];$/;"	m	union:Vec4::__anon51
elem	.\math.h	/^		u32 elem[2];$/;"	m	union:Vec2u::__anon45
elem	.\math.h	/^	float elem[4][4];$/;"	m	struct:Mat4
element_counter	.\ui_renderer.cpp	/^	u32 element_counter;$/;"	m	struct:UIRenderer	file:
element_id	.\ui_renderer.cpp	/^	u32 element_id;$/;"	m	struct:UICachedData	file:
elements	.\ui_renderer.cpp	/^	UIElement* elements;$/;"	m	struct:UIRenderer	file:
end	.\shapes.cpp	/^	Vec3 end;$/;"	m	struct:Line	file:
entities	.\simulation.h	/^	Entity* entities;$/;"	m	struct:EntityBlob
entity_blob	.\game.h	/^	EntityBlob entity_blob;$/;"	m	struct:GameState
entity_count	.\simulation.h	/^	u32 entity_count;$/;"	m	struct:EntityBlob
entity_types	.\simulation.h	/^	u8 entity_types[MAX_SPAWNS];$/;"	m	struct:SpawnerInfo
eob_run	.\include\stb_image.h	/^			int            eob_run;$/;"	m	struct:__anon11
eof	.\include\stb_image.h	/^		int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon5
equal	.\include\stb_truetype.h	/^static int equal(float *a, float *b)$/;"	f
exe_absfilepath	.\win32.h	/^	char exe_absfilepath[MAX_PATH];$/;"	m	struct:Win32State
exe_absfolderpath	.\win32.h	/^	char exe_absfolderpath[MAX_PATH];$/;"	m	struct:Win32State
executable_reloaded	.\game.cpp	/^bool executable_reloaded = false;$/;"	v
executable_reloaded	.\game_layer.h	/^	bool executable_reloaded;$/;"	m	struct:GameLayer
expanded	.\include\stb_image.h	/^	stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon17
extra	.\include\stb_rect_pack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' not 'width+2'$/;"	m	struct:stbrp_context
extra_read	.\include\stb_image.h	/^			int extra_read;$/;"	m	struct:__anon19
ey	.\include\stb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge
failed	.\platform_api.h	/^	bool failed;$/;"	m	struct:PlatformFileHandle
far_clip	.\camera.cpp	/^	float far_clip;$/;"	m	struct:Camera	file:
fast	.\include\stb_image.h	/^			stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon10
fast	.\include\stb_image.h	/^		stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon14
fast_ac	.\include\stb_image.h	/^			stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon11
fdselect	.\include\stb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo
fdx	.\include\stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	.\include\stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
final_positions	.\simulation.h	/^	Vec3 final_positions[MAX_PARTICLES];$/;"	m	struct:ParticleSystem
final_size	.\simulation.h	/^	Vec3 final_size;$/;"	m	struct:ParticleSystem
first	.\include\stb_image.h	/^			stbi_uc first;$/;"	m	struct:__anon21
first_free	.\include\stb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap
first_free	.\simulation.h	/^	Entity* first_free;$/;"	m	struct:EntityBlob
first_row_filter	.\include\stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
first_unicode_codepoint_in_range	.\include\stb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon31
first_x	.\include\stb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon41
first_y	.\include\stb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon41
firstcode	.\include\stb_image.h	/^		stbi__uint16 firstcode[16];$/;"	m	struct:__anon14
firstsymbol	.\include\stb_image.h	/^		stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon14
flags	.\include\stb_image.h	/^			int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon22
flags	.\ui_renderer.cpp	/^	u64 flags;$/;"	m	struct:UIElement	file:
font_data	.\font_handling.cpp	/^	FontData* font_data;$/;"	m	struct:TextUI	file:
font_line_width	.\font_handling.cpp	/^	int font_line_width;$/;"	m	struct:FontData	file:
font_size	.\font_handling.cpp	/^	int font_size;$/;"	m	struct:FontData	file:
font_size	.\include\stb_truetype.h	/^   float font_size;$/;"	m	struct:__anon31
font_size	.\ui_renderer.cpp	/^	u8 font_size;$/;"	m	struct:UIElement	file:
fontdicts	.\include\stb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo
fonts_count	.\file_formats.h	/^	u32 fonts_count;$/;"	m	struct:FontsBlob
fontstart	.\include\stb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
fov	.\camera.cpp	/^			float fov;$/;"	m	struct:Camera::__anon1::__anon2	file:
frame_arena	.\font_handling.cpp	/^	MemoryArena* frame_arena;$/;"	m	struct:TextUI	file:
frame_arena	.\game.h	/^	MemoryArena* frame_arena;$/;"	m	struct:GameState
frame_arena	.\renderer.h	/^	MemoryArena* frame_arena;$/;"	m	struct:Renderer
frame_arena	.\simulation.h	/^	MemoryArena* frame_arena;$/;"	m	struct:EntityBlob
frame_arena	.\ui_renderer.cpp	/^	MemoryArena* frame_arena;$/;"	m	struct:UIRenderer	file:
frame_arena_temp	.\game.h	/^	TemporaryMemory frame_arena_temp;$/;"	m	struct:GameState
frame_time	.\timer.h	/^	float frame_time;$/;"	m	struct:Timer
free_head	.\include\stb_rect_pack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context
ftex	.\include\stb_truetype.h	/^GLuint ftex;$/;"	v
full_screen_quad_shader	.\post_process_renderer.cpp	/^	VertexShader* full_screen_quad_shader;$/;"	m	struct:PostProcessRenderer	file:
function_count	.\win32.h	/^	u8 function_count;$/;"	m	struct:Win32DLL
function_names	.\win32.h	/^	char** function_names;$/;"	m	struct:Win32DLL
functions	.\win32.h	/^	void** functions;$/;"	m	struct:Win32DLL
fx	.\include\stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g_game_functions	.\win32.cpp	/^global Win32GameFunctionTable g_game_functions;$/;"	v
g_running	.\win32.cpp	/^global bool g_running;$/;"	v
g_win32_state	.\win32.cpp	/^global Win32State g_win32_state;$/;"	v
g_win32_window	.\win32.cpp	/^global Win32Window g_win32_window;$/;"	v
game_loop	.\win32.h	/^	GameLoop* game_loop;$/;"	m	struct:Win32GameFunctionTable
game_mode	.\game.h	/^	GAME_MODE game_mode;$/;"	m	struct:GameState
game_state	.\game_layer.h	/^	struct GameState* game_state;$/;"	m	struct:GameLayer	typeref:struct:GameLayer::GameState
generatetetrainfo	.\tetra.cpp	/^generatetetrainfo(tetra* tetra) {$/;"	f	file:
global	.\base_types.h	7;"	d
glyf	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
glyph1	.\include\stb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry
glyph2	.\include\stb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry
glyph_counter	.\font_handling.cpp	/^	u32 glyph_counter;$/;"	m	struct:FontData	file:
glyphs	.\font_handling.cpp	/^	Glyph glyphs[MAX_GLYPHS_ON_SCREEN];$/;"	m	struct:FontData	file:
gpos	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
gsubrs	.\include\stb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo
h	.\include\stb_image.h	/^				int h,v;$/;"	m	struct:__anon11::__anon12
h	.\include\stb_image.h	/^			int w,h;$/;"	m	struct:__anon22
h	.\include\stb_rect_pack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
h	.\include\stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	.\include\stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon34
h2	.\include\stb_image.h	/^				int x,y,w2,h2;$/;"	m	struct:__anon11::__anon12
h_oversample	.\include\stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon31
h_oversample	.\include\stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
ha	.\include\stb_image.h	/^				int hd,ha;$/;"	m	struct:__anon11::__anon12
handle	.\platform_api.h	/^	HWND handle;$/;"	m	struct:Win32Window
handle	.\platform_api.h	/^	void* handle;$/;"	m	struct:PlatformFileHandle
hd	.\include\stb_image.h	/^				int hd,ha;$/;"	m	struct:__anon11::__anon12
head	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	.\include\stb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
health	.\simulation.h	/^	i32 health;$/;"	m	struct:Entity
height	.\asset_formats.h	/^	u32 height;$/;"	m	struct:TextureData
height	.\file_formats.h	/^	u32 height;$/;"	m	struct:TextureFormat
height	.\include\stb_rect_pack.h	/^   int height;$/;"	m	struct:stbrp_context
height	.\include\stb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context
height	.\include\stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon43
height	.\platform_api.h	/^struct WindowDimensions { u32 width; u32 height; };$/;"	m	struct:WindowDimensions
held	.\platform_api.h	/^struct Button { bool pressed, held; };$/;"	m	struct:Button
heuristic	.\include\stb_rect_pack.h	/^   int heuristic;$/;"	m	struct:stbrp_context
hhea	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
history	.\include\stb_image.h	/^			stbi_uc *history;$/;"	m	struct:__anon22
hmtx	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hs	.\include\stb_image.h	/^		int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon13
hsz	.\include\stb_image.h	/^			int bpp, offset, hsz;$/;"	m	struct:__anon19
huff_ac	.\include\stb_image.h	/^			stbi__huffman huff_ac[4];$/;"	m	struct:__anon11
huff_dc	.\include\stb_image.h	/^			stbi__huffman huff_dc[4];$/;"	m	struct:__anon11
i16	.\base_types.h	/^typedef int16_t i16;$/;"	t
i32	.\base_types.h	/^typedef int32_t i32;$/;"	t
i64	.\base_types.h	/^typedef int64_t i64;$/;"	t
i8	.\base_types.h	/^typedef int8_t i8;$/;"	t
id	.\include\stb_image.h	/^				int id;$/;"	m	struct:__anon11::__anon12
id	.\include\stb_rect_pack.h	/^   int            id;$/;"	m	struct:stbrp_rect
id	.\include\stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
id	.\ui_renderer.cpp	/^	u32 id;$/;"	m	struct:UIElement	file:
idata	.\include\stb_image.h	/^	stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon17
idct_block_kernel	.\include\stb_image.h	/^			void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon11
identification	.\file_formats.h	/^	char identification[5];$/;"	m	struct:GameAssetFile
il	.\renderer.h	/^	ID3D11InputLayout* il;$/;"	m	struct:VertexShader
img_buffer	.\include\stb_image.h	/^		stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6
img_buffer_end	.\include\stb_image.h	/^		stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6
img_buffer_original	.\include\stb_image.h	/^		stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon6
img_buffer_original_end	.\include\stb_image.h	/^		stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon6
img_comp	.\include\stb_image.h	/^			} img_comp[4];$/;"	m	struct:__anon11	typeref:struct:__anon11::__anon12
img_h_max	.\include\stb_image.h	/^			int img_h_max, img_v_max;$/;"	m	struct:__anon11
img_mcu_h	.\include\stb_image.h	/^			int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon11
img_mcu_w	.\include\stb_image.h	/^			int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon11
img_mcu_x	.\include\stb_image.h	/^			int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon11
img_mcu_y	.\include\stb_image.h	/^			int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon11
img_n	.\include\stb_image.h	/^		int img_n, img_out_n;$/;"	m	struct:__anon6
img_out_n	.\include\stb_image.h	/^		int img_n, img_out_n;$/;"	m	struct:__anon6
img_v_max	.\include\stb_image.h	/^			int img_h_max, img_v_max;$/;"	m	struct:__anon11
img_x	.\include\stb_image.h	/^		stbi__uint32 img_x, img_y;$/;"	m	struct:__anon6
img_y	.\include\stb_image.h	/^		stbi__uint32 img_x, img_y;$/;"	m	struct:__anon6
in	.\post_process_renderer.cpp	/^	ID3D11ShaderResourceView* in;$/;"	m	struct:PostProcessPipeline	file:
index	.\renderer.h	/^	IndexBuffer* index;$/;"	m	struct:SetIndexBuffer
indexToLocFormat	.\include\stb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
index_buffer	.\mesh_renderer.cpp	/^	IndexBuffer* index_buffer;$/;"	m	struct:Mesh	file:
index_map	.\include\stb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
indices	.\asset_formats.h	/^	u32* indices;$/;"	m	struct:MeshData
indices_count	.\asset_formats.h	/^	u32 indices_count;$/;"	m	struct:MeshData
indices_count	.\file_formats.h	/^	u32 indices_count;$/;"	m	struct:MeshFormat
indices_count	.\mesh_renderer.cpp	/^	u32 indices_count;$/;"	m	struct:Mesh	file:
indices_count	.\renderer.h	/^	u32 indices_count;$/;"	m	struct:DrawIndexed
info	.\mesh_renderer.cpp	/^	MeshInfo* info;$/;"	m	struct:MeshPipeline	file:
info	.\tetra.cpp	/^	MeshInfo info[MAX_TETRA];$/;"	m	struct:Tetra	file:
init	.\simulation.h	/^	bool init;$/;"	m	struct:ParticleSystem
init_done	.\game_mode.h	/^	bool init_done;$/;"	m	struct:TestMode
init_mode	.\include\stb_rect_pack.h	/^   int init_mode;$/;"	m	struct:stbrp_context
initial_size	.\simulation.h	/^	Vec3 initial_size;$/;"	m	struct:ParticleSystem
instance_count	.\renderer.h	/^	u32 instance_count;$/;"	m	struct:DrawInstanced
invert	.\include\stb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge
io	.\include\stb_image.h	/^		stbi_io_callbacks io;$/;"	m	struct:__anon6
io_user_data	.\include\stb_image.h	/^		void *io_user_data;$/;"	m	struct:__anon6
jfif	.\include\stb_image.h	/^			int            jfif;$/;"	m	struct:__anon11
kern	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
last_write_time	.\win32.h	/^	FILETIME last_write_time; $/;"	m	struct:Win32DLL
left	.\camera.cpp	/^			float left;$/;"	m	struct:Camera::__anon1::__anon3	file:
length	.\include\stb_image.h	/^	stbi__uint32 length;$/;"	m	struct:__anon16
length	.\include\stb_sprintf.h	/^   int length;$/;"	m	struct:stbsp__context
lflags	.\include\stb_image.h	/^			int lflags;$/;"	m	struct:__anon22
life_time	.\simulation.h	/^	float life_time;$/;"	m	struct:ParticleSystem
light	.\mesh_renderer.cpp	/^	LightInfo light;$/;"	m	struct:MeshRenderer	file:
light_constants	.\mesh_renderer.cpp	/^	ConstantsBuffer* light_constants;$/;"	m	struct:MeshRenderer	file:
line0	.\include\stb_image.h	/^		stbi_uc *line0,*line1;$/;"	m	struct:__anon13
line1	.\include\stb_image.h	/^		stbi_uc *line0,*line1;$/;"	m	struct:__anon13
line_size	.\include\stb_image.h	/^			int line_size;$/;"	m	struct:__anon22
linebuf	.\include\stb_image.h	/^				stbi_uc *linebuf;$/;"	m	struct:__anon11::__anon12
load_jpeg_image	.\include\stb_image.h	/^	static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
loca	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
lock_absfilepath	.\win32.h	/^	char* lock_absfilepath;$/;"	m	struct:Win32DLL
lpal	.\include\stb_image.h	/^			stbi_uc lpal[256][4];$/;"	m	struct:__anon22
ma	.\include\stb_image.h	/^			unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon19
main	.\include\stb_truetype.h	/^int main(int argc, char **argv)$/;"	f
marker	.\include\stb_image.h	/^			unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon11
max	.\shapes.cpp	/^			Vec3 max;$/;"	m	struct:Quad::__anon57::__anon59	file:
max	.\simulation.h	/^	Vec3 max;$/;"	m	struct:BoundingBox
max	.\ui_renderer.cpp	/^	Vec2 max;$/;"	m	struct:UIData	file:
max	.\ui_renderer.cpp	/^	Vec2 max;$/;"	m	struct:UIDimension	file:
max_x	.\include\stb_image.h	/^			int max_x, max_y;$/;"	m	struct:__anon22
max_x	.\include\stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon41
max_y	.\include\stb_image.h	/^			int max_x, max_y;$/;"	m	struct:__anon22
max_y	.\include\stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon41
maxcode	.\include\stb_image.h	/^			unsigned int maxcode[18];$/;"	m	struct:__anon10
maxcode	.\include\stb_image.h	/^		int maxcode[17];$/;"	m	struct:__anon14
mb	.\include\stb_image.h	/^			unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon19
memory_sentinel	.\win32.h	/^	Win32MemoryBlock memory_sentinel;$/;"	m	struct:Win32State
mesh	.\asset_info.h	/^	Mesh* mesh;$/;"	m	struct:MeshAssetInfo
mesh	.\mesh_renderer.cpp	/^	Mesh mesh;$/;"	m	struct:MeshPipeline	file:
mesh_assets	.\asset_loading.cpp	/^	MeshAssetInfo* mesh_assets;$/;"	m	struct:GameAssets	file:
mesh_constants	.\mesh_renderer.cpp	/^	ConstantsBuffer* mesh_constants;$/;"	m	struct:MeshRenderer	file:
mesh_pipeline	.\simulation.h	/^	MeshPipeline mesh_pipeline;$/;"	m	struct:Entity
mesh_renderer	.\game.h	/^	MeshRenderer* mesh_renderer;$/;"	m	struct:GameState
meshes_count	.\file_formats.h	/^	u32 meshes_count;$/;"	m	struct:MeshesBlob
mg	.\include\stb_image.h	/^			unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon19
min	.\shapes.cpp	/^			Vec3 min;$/;"	m	struct:Quad::__anon57::__anon59	file:
min	.\simulation.h	/^	Vec3 min;$/;"	m	struct:BoundingBox
min	.\ui_renderer.cpp	/^	Vec2 min;$/;"	m	struct:UIData	file:
min	.\ui_renderer.cpp	/^	Vec2 min;$/;"	m	struct:UIDimension	file:
min_block_size	.\memory_management.h	/^	u64 min_block_size;$/;"	m	struct:MemoryArena
min_x	.\include\stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon41
min_y	.\include\stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon41
model	.\mesh_renderer.cpp	/^	Mat4 model;$/;"	m	struct:MeshInfo	file:
monochrome_ps	.\font_handling.cpp	/^	PixelShader* monochrome_ps;$/;"	m	struct:TextUI	file:
mr	.\include\stb_image.h	/^			unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon19
ms_per_frame	.\game_layer.h	/^	double ms_per_frame;$/;"	m	struct:GameLayer
msaa_quality_level	.\renderer.h	/^	u32 msaa_quality_level;$/;"	m	struct:Renderer
msaa_sample_count	.\renderer.h	/^	u32 msaa_sample_count;$/;"	m	struct:Renderer
my_stbtt_initfont	.\include\stb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	.\include\stb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
name	.\asset_formats.h	/^	char* name;$/;"	m	struct:MaterialData
name	.\asset_info.h	/^	char* name;$/;"	m	struct:MeshAssetInfo
name	.\asset_info.h	/^	char* name;$/;"	m	struct:TextureAssetInfo
name	.\file_formats.h	/^	char name[STRING_LENGTH_FONT];$/;"	m	struct:FontFormat
name	.\file_formats.h	/^	char name[STRING_LENGTH_MESH];$/;"	m	struct:MeshFormat
name	.\file_formats.h	/^	char name[STRING_LENGTH_TEXTURE];$/;"	m	struct:TextureFormat
name	.\platform_api.h	/^	void* name;$/;"	m	struct:PlatformFileInfo
name_of_blob	.\file_formats.h	/^	char name_of_blob[STRING_LENGTH_BLOB];$/;"	m	struct:Directory
near_clip	.\camera.cpp	/^	float near_clip;$/;"	m	struct:Camera	file:
next	.\asset_info.h	/^	MeshAssetInfo* next;$/;"	m	struct:MeshAssetInfo
next	.\asset_info.h	/^	TextureAssetInfo* next;$/;"	m	struct:TextureAssetInfo
next	.\font_handling.cpp	/^	FontData* next;$/;"	m	struct:FontData	file:
next	.\include\stb_rect_pack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node
next	.\include\stb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	.\include\stb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
next	.\simulation.h	/^	Entity* next;$/;"	m	struct:Entity
next	.\simulation.h	/^	SpawnInfo* next;$/;"	m	struct:SpawnInfo
next	.\ui_renderer.cpp	/^	UICachedData* next;$/;"	m	struct:UICachedData	file:
next	.\ui_renderer.cpp	/^	UIElement* next;$/;"	m	struct:UIElement	file:
next	.\win32.h	/^	Win32MemoryBlock* next;$/;"	m	struct:Win32MemoryBlock
nodes	.\include\stb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context
nomore	.\include\stb_image.h	/^			int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon11
numGlyphs	.\include\stb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
num_bits	.\include\stb_image.h	/^		int num_bits;$/;"	m	struct:__anon15
num_channels	.\include\stb_image.h	/^	int num_channels;$/;"	m	struct:__anon8
num_chars	.\include\stb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon31
num_components	.\asset_formats.h	/^	u8 num_components;$/;"	m	struct:TextureData
num_components	.\file_formats.h	/^	u32 num_components;$/;"	m	struct:TextureFormat
num_nodes	.\include\stb_rect_pack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context
num_remaining_in_head_chunk	.\include\stb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
num_vertices	.\include\stb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon41
number_of_blobs	.\file_formats.h	/^	u8 number_of_blobs;$/;"	m	struct:GameAssetFile
offset	.\include\stb_image.h	/^			int bpp, offset, hsz;$/;"	m	struct:__anon19
offset	.\renderer.h	/^	u32 offset;$/;"	m	struct:DrawIndexed
offset	.\renderer.h	/^	u32 offset;$/;"	m	struct:DrawInstanced
offset	.\renderer.h	/^	u32 offset;$/;"	m	struct:DrawVertices
offset	.\renderer.h	/^	u32 offset;$/;"	m	struct:SetIndexBuffer
offset	.\renderer.h	/^	u32 offset;$/;"	m	struct:SetVertexBuffer
offset_to_blob	.\file_formats.h	/^	u32 offset_to_blob;$/;"	m	struct:Directory
offset_to_blob_directories	.\file_formats.h	/^	u32 offset_to_blob_directories;$/;"	m	struct:GameAssetFile
offset_to_data	.\file_formats.h	/^	u32 offset_to_data;$/;"	m	struct:FontFormat
offset_to_data	.\file_formats.h	/^	u32 offset_to_data;$/;"	m	struct:TextureFormat
offset_to_data	.\file_formats.h	/^	u32 offset_to_data;$/;"	m	struct:VertexBufferFormat
offset_to_font_formats	.\file_formats.h	/^	u32 offset_to_font_formats;$/;"	m	struct:FontsBlob
offset_to_indices	.\file_formats.h	/^	u32 offset_to_indices;$/;"	m	struct:MeshFormat
offset_to_mesh_formats	.\file_formats.h	/^	u32 offset_to_mesh_formats;$/;"	m	struct:MeshesBlob
offset_to_texture_formats	.\file_formats.h	/^	u32 offset_to_texture_formats;$/;"	m	struct:TexturesBlob
offset_to_vertex_buffers	.\file_formats.h	/^	u32 offset_to_vertex_buffers;$/;"	m	struct:MeshFormat
offsets	.\asset_loading.cpp	/^	u32 offsets[ASSET_BLOB_TOTAL];$/;"	m	struct:GameAssets	file:
open_file	.\platform_api.h	/^	PlatformOpenFile* open_file;$/;"	m	struct:PlatformAPI
order	.\include\stb_image.h	/^			int scan_n, order[4];$/;"	m	struct:__anon11
orthographic	.\camera.cpp	/^	bool orthographic;$/;"	m	struct:Camera	file:
out	.\include\stb_image.h	/^			stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon22
out	.\include\stb_image.h	/^	stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon17
out	.\post_process_renderer.cpp	/^	ID3D11RenderTargetView* out;$/;"	m	struct:PostProcessPipeline	file:
pack_info	.\include\stb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context
packed_chars	.\font_handling.cpp	/^	stbtt_packedchar packed_chars[0x7E-0x20];$/;"	m	struct:FontData	file:
padding	.\include\stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon33
padding	.\include\stb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context
pair	.\include\stb_sprintf.h	/^   char pair[201];$/;"	m	struct:__anon26
pal	.\include\stb_image.h	/^			stbi_uc  pal[256][4];$/;"	m	struct:__anon22
parse	.\include\stb_image.h	/^			int parse, step;$/;"	m	struct:__anon22
particle_count	.\simulation.h	/^	u32 particle_count;$/;"	m	struct:ParticleSystem
particle_system	.\simulation.h	/^	ParticleSystem particle_system;$/;"	m	struct:Entity
particle_system	.\simulation.h	/^	ParticleSystem particle_system;$/;"	m	struct:SpawnInfo
permanent_arena	.\asset_loading.cpp	/^	MemoryArena* permanent_arena;$/;"	m	struct:GameAssets	file:
permanent_arena	.\renderer.h	/^	MemoryArena* permanent_arena;$/;"	m	struct:Renderer
permanent_arena	.\simulation.h	/^	MemoryArena* permanent_arena;$/;"	m	struct:EntityBlob
pipeline	.\post_process_renderer.cpp	/^	PostProcessPipeline pipeline;$/;"	m	struct:PostProcessRenderer	file:
pipelines	.\mesh_renderer.cpp	/^	MeshPipeline pipelines[MAX_MESH_PIPELINES];$/;"	m	struct:MeshRenderer	file:
pitch	.\renderer.h	/^	u32 pitch;$/;"	m	struct:PushRenderBufferData
pixel	.\renderer.h	/^struct SetPixelShader       { PixelShader* pixel;   } ;$/;"	m	struct:SetPixelShader
pixels	.\asset_formats.h	/^	void* pixels;$/;"	m	struct:TextureData
pixels	.\font_handling.cpp	/^	void* pixels;$/;"	m	struct:FontData	file:
pixels	.\include\stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon34
pixels	.\include\stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
platform_api	.\game.cpp	/^PlatformAPI platform_api;$/;"	v
platform_api	.\game_layer.h	/^	PlatformAPI platform_api;$/;"	m	struct:GameLayer
position	.\camera.cpp	/^	Vec3 position;$/;"	m	struct:Camera	file:
position	.\math.h	/^	Vec3 position;$/;"	m	struct:Transform
position	.\mesh_renderer.cpp	/^	Vec3 position;$/;"	m	struct:LightInfo	file:
positions	.\quad_renderer.cpp	/^	Vec3 positions[MAX_TEXTURED_QUADS*4];$/;"	m	struct:QuadRenderer	file:
post_process_renderer	.\game.h	/^	PostProcessRenderer* post_process_renderer;$/;"	m	struct:GameState
prefix	.\include\stb_image.h	/^			stbi__int16 prefix;$/;"	m	struct:__anon21
pressed	.\game.cpp	/^bool pressed = false;$/;"	v
pressed	.\platform_api.h	/^struct Button { bool pressed, held; };$/;"	m	struct:Button
pressed	.\ui_renderer.cpp	/^	bool pressed;$/;"	m	struct:UICachedData	file:
pressed	.\ui_renderer.cpp	/^	bool pressed;$/;"	m	struct:UIElement	file:
prev	.\platform_api.h	/^	PlatformMemoryBlock* prev;$/;"	m	struct:PlatformMemoryBlock
prev	.\simulation.h	/^	Entity* prev;$/;"	m	struct:Entity
prev	.\win32.h	/^	Win32MemoryBlock* prev;$/;"	m	struct:Win32MemoryBlock
prev_link	.\include\stb_rect_pack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon25
primary_color	.\ui_renderer.cpp	/^	Vec4 primary_color[2];$/;"	m	struct:UIElement	file:
progressive	.\include\stb_image.h	/^			int            progressive;$/;"	m	struct:__anon11
properties	.\simulation.h	/^	u64 properties;$/;"	m	struct:Entity
ps	.\mesh_renderer.cpp	/^	PixelShader* ps;$/;"	m	struct:MeshRenderer	file:
ps	.\post_process_renderer.cpp	/^	PixelShader* ps[POST_PROCESS_TYPE_TOTAL];$/;"	m	struct:PostProcessRenderer	file:
ps	.\ui_renderer.cpp	/^	PixelShader* ps;$/;"	m	struct:UIRenderer	file:
pvertices	.\include\stb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon41
quad	.\quad_renderer.cpp	/^	Quad quad;$/;"	m	struct:RenderQuad	file:
quad	.\quad_renderer.cpp	/^	Quad quad;$/;"	m	struct:TexturedQuad	file:
quad_buffer	.\quad_renderer.cpp	/^	StructuredBuffer* quad_buffer;$/;"	m	struct:QuadRenderer	file:
quad_counter	.\quad_renderer.cpp	/^	u32 quad_counter;$/;"	m	struct:QuadRenderer	file:
quad_ps	.\quad_renderer.cpp	/^	PixelShader* quad_ps;$/;"	m	struct:QuadRenderer	file:
quad_renderer	.\game.h	/^	QuadRenderer* quad_renderer;$/;"	m	struct:GameState
quad_vs	.\quad_renderer.cpp	/^	VertexShader* quad_vs;$/;"	m	struct:QuadRenderer	file:
quads	.\quad_renderer.cpp	/^	RenderQuad quads[MAX_QUADS];$/;"	m	struct:QuadRenderer	file:
quit_request	.\game_layer.h	/^	bool quit_request;$/;"	m	struct:GameLayer
rasterizer_states	.\renderer.h	/^	ID3D11RasterizerState* rasterizer_states[RASTERIZER_STATE_TOTAL];$/;"	m	struct:Renderer
ratio	.\include\stb_image.h	/^			int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon22
raw_coeff	.\include\stb_image.h	/^				void *raw_data, *raw_coeff;$/;"	m	struct:__anon11::__anon12
raw_data	.\include\stb_image.h	/^				void *raw_data, *raw_coeff;$/;"	m	struct:__anon11::__anon12
read	.\include\stb_image.h	/^		int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon5
read_file	.\platform_api.h	/^	PlatformReadFile* read_file;$/;"	m	struct:PlatformAPI
read_from_callbacks	.\include\stb_image.h	/^		int read_from_callbacks;$/;"	m	struct:__anon6
readable_render_target	.\renderer.h	/^	ReadableRenderTarget readable_render_target;$/;"	m	struct:Renderer
real_time	.\timer.h	/^	float real_time;$/;"	m	struct:Timer
rect_height_compare	.\include\stb_rect_pack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f
rect_original_order	.\include\stb_rect_pack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f
render_target	.\renderer.h	/^	ID3D11RenderTargetView* render_target;$/;"	m	struct:ReadableRenderTarget
render_target	.\renderer.h	/^	RenderTarget* render_target;   \/\/ 0 means set backbuffer as render target$/;"	m	struct:SetRenderTarget
render_target	.\renderer.h	/^	RenderTarget* render_target;$/;"	m	struct:ClearRenderTarget
renderer	.\font_handling.cpp	/^	Renderer* renderer;$/;"	m	struct:TextUI	file:
renderer	.\game.h	/^	Renderer* renderer;$/;"	m	struct:GameState
resample	.\include\stb_image.h	/^		resample_row_func resample;$/;"	m	struct:__anon13
resample_row_1	.\include\stb_image.h	/^	static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	.\include\stb_image.h	/^	typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	.\include\stb_image.h	/^			stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon11
resolution_constants	.\post_process_renderer.cpp	/^	ConstantsBuffer* resolution_constants;$/;"	m	struct:PostProcessRenderer	file:
response	.\simulation.h	/^	u8 response;$/;"	m	struct:Entity
restart_interval	.\include\stb_image.h	/^			int restart_interval, todo;$/;"	m	struct:__anon11
rgb	.\include\stb_image.h	/^			int            rgb;$/;"	m	struct:__anon11
right	.\camera.cpp	/^			float right;$/;"	m	struct:Camera::__anon1::__anon3	file:
rot_sens	.\camera.cpp	/^	float rot_sens;$/;"	m	struct:FPControlInfo	file:
rotation	.\camera.cpp	/^	Quat rotation;$/;"	m	struct:Camera	file:
rotation	.\math.h	/^	Quat rotation;$/;"	m	struct:Transform
s	.\include\stb_image.h	/^			stbi__context *s;$/;"	m	struct:__anon11
s	.\include\stb_image.h	/^	stbi__context *s;$/;"	m	struct:__anon17
s0	.\font_handling.cpp	/^	float s0, t0, s1, t1;$/;"	m	struct:Glyph	file:
s0	.\include\stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon29
s1	.\font_handling.cpp	/^	float s0, t0, s1, t1;$/;"	m	struct:Glyph	file:
s1	.\include\stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon29
samplers	.\renderer.h	/^	ID3D11SamplerState* samplers[SAMPLER_STATE_TOTAL];$/;"	m	struct:Renderer
sb	.\ui_renderer.cpp	/^	StructuredBuffer* sb;$/;"	m	struct:UIRenderer	file:
scale	.\math.h	/^	Vec3 scale;$/;"	m	struct:Transform
scan_n	.\include\stb_image.h	/^			int scan_n, order[4];$/;"	m	struct:__anon11
screen_res	.\font_handling.cpp	/^	Vec2 screen_res;$/;"	m	struct:TextUI	file:
screen_resolution	.\ui_renderer.cpp	/^	Vec2 screen_resolution;$/;"	m	struct:UIRenderer	file:
secondary_color	.\ui_renderer.cpp	/^	Vec4 secondary_color[2];$/;"	m	struct:UIElement	file:
set_separators	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF void STB_SPRINTF_DECORATE(set_separators)(char pcomma, char pperiod)$/;"	f
shader	.\renderer.h	/^	ID3D11PixelShader* shader;$/;"	m	struct:PixelShader
shader	.\renderer.h	/^	ID3D11VertexShader* shader;$/;"	m	struct:VertexShader
shader_resource	.\renderer.h	/^	ID3D11ShaderResourceView* shader_resource;$/;"	m	struct:ReadableRenderTarget
size	.\asset_loading.cpp	/^	u32 size;$/;"	m	struct:GameAssets	file:
size	.\include\stb_image.h	/^			stbi_uc  size[257];$/;"	m	struct:__anon10
size	.\include\stb_image.h	/^			stbi_uc size,type,channel;$/;"	m	struct:__anon20
size	.\include\stb_image.h	/^		stbi_uc  size[STBI__ZNSYMS];$/;"	m	struct:__anon14
size	.\include\stb_truetype.h	/^   int size;$/;"	m	struct:__anon27
size	.\platform_api.h	/^	u64 size;$/;"	m	struct:PlatformFileInfo
size	.\platform_api.h	/^	u64 size;$/;"	m	struct:PlatformMemoryBlock
size	.\renderer.h	/^	u32 size;$/;"	m	struct:PushRenderBufferData
size	.\simulation.h	/^	Vec3 size;$/;"	m	struct:BoundingBox
skip	.\include\stb_image.h	/^		void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon5
skip_missing	.\include\stb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context
slot	.\renderer.h	/^	u8 slot;$/;"	m	struct:SetConstantsBuffer
slot	.\renderer.h	/^	u8 slot;$/;"	m	struct:SetSamplerState
slot	.\renderer.h	/^	u8 slot;$/;"	m	struct:SetStructuredBuffer
slot	.\renderer.h	/^	u8 slot;$/;"	m	struct:SetTextureBuffer
slot	.\renderer.h	/^	u8 slot;$/;"	m	struct:SetVertexBuffer
snprintf	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(snprintf)(char *buf, int count, char const *fmt, ...)$/;"	f
spawn_count	.\simulation.h	/^	u8 spawn_count;$/;"	m	struct:SpawnerInfo
spawn_id	.\simulation.h	/^	u8 spawn_id;$/;"	m	struct:SpawnerInfo
spawn_position	.\simulation.h	/^	Vec3 spawn_position;$/;"	m	struct:ParticleSystem
spawner_info	.\simulation.h	/^	SpawnerInfo spawner_info;$/;"	m	struct:Entity
spawntetra	.\tetra.cpp	/^spawntetra(tetra* tetra, transform transform, vec4 color) {$/;"	f	file:
spec_end	.\include\stb_image.h	/^			int            spec_end;$/;"	m	struct:__anon11
spec_start	.\include\stb_image.h	/^			int            spec_start;$/;"	m	struct:__anon11
speed	.\simulation.h	/^	float speed;$/;"	m	struct:Entity
spin_amount	.\simulation.h	/^	float spin_amount;$/;"	m	struct:Entity
spin_axis	.\simulation.h	/^	u8 spin_axis;$/;"	m	struct:Entity
sprintf	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(sprintf)(char *buf, char const *fmt, ...)$/;"	f
start	.\shapes.cpp	/^	Vec3 start;$/;"	m	struct:Line	file:
start_x	.\include\stb_image.h	/^			int start_x, start_y;$/;"	m	struct:__anon22
start_y	.\include\stb_image.h	/^			int start_x, start_y;$/;"	m	struct:__anon22
started	.\include\stb_truetype.h	/^   int started;$/;"	m	struct:__anon41
stbi__DNL	.\include\stb_image.h	3322;"	d
stbi__EOI	.\include\stb_image.h	3324;"	d
stbi__SOF	.\include\stb_image.h	3325;"	d
stbi__SOF_progressive	.\include\stb_image.h	3328;"	d
stbi__SOI	.\include\stb_image.h	3323;"	d
stbi__SOS	.\include\stb_image.h	3326;"	d
stbi__YCbCr_to_RGB_row	.\include\stb_image.h	/^	static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	.\include\stb_image.h	/^	static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	.\include\stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	.\include\stb_image.h	/^		stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	.\include\stb_image.h	/^	stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	.\include\stb_image.h	/^		static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	.\include\stb_image.h	/^	stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	.\include\stb_image.h	/^	static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	.\include\stb_image.h	/^		static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	.\include\stb_image.h	/^		} stbi__bmp_data;$/;"	t	typeref:struct:__anon19
stbi__bmp_info	.\include\stb_image.h	/^		static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	.\include\stb_image.h	/^		static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	.\include\stb_image.h	/^		static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_set_mask_defaults	.\include\stb_image.h	/^		static int stbi__bmp_set_mask_defaults(stbi__bmp_data *info, int compress)$/;"	f
stbi__bmp_test	.\include\stb_image.h	/^		static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	.\include\stb_image.h	/^		static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	.\include\stb_image.h	/^		static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	.\include\stb_image.h	/^		static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	.\include\stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	.\include\stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	.\include\stb_image.h	/^	static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	.\include\stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	.\include\stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	.\include\stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	.\include\stb_image.h	/^		static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	.\include\stb_image.h	/^		static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	.\include\stb_image.h	/^	} stbi__context;$/;"	t	typeref:struct:__anon6
stbi__convert_16_to_8	.\include\stb_image.h	/^		static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	.\include\stb_image.h	/^		static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	.\include\stb_image.h	/^		static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	.\include\stb_image.h	/^		static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	.\include\stb_image.h	/^		static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	.\include\stb_image.h	/^	static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	.\include\stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	.\include\stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	.\include\stb_image.h	/^		static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	.\include\stb_image.h	4953;"	d
stbi__de_iphone_flag	.\include\stb_image.h	4973;"	d
stbi__de_iphone_flag_global	.\include\stb_image.h	/^static int stbi__de_iphone_flag_global = 0;$/;"	v
stbi__de_iphone_flag_local	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__de_iphone_flag_local, stbi__de_iphone_flag_set;$/;"	v
stbi__de_iphone_flag_set	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__de_iphone_flag_local, stbi__de_iphone_flag_set;$/;"	v
stbi__decode_jpeg_header	.\include\stb_image.h	/^	static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	.\include\stb_image.h	/^	static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	.\include\stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	.\include\stb_image.h	3449;"	d
stbi__div4	.\include\stb_image.h	3400;"	d
stbi__do_png	.\include\stb_image.h	/^		static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	.\include\stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	.\include\stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	.\include\stb_image.h	1071;"	d
stbi__err	.\include\stb_image.h	1073;"	d
stbi__err	.\include\stb_image.h	1075;"	d
stbi__errpf	.\include\stb_image.h	1078;"	d
stbi__errpuc	.\include\stb_image.h	1079;"	d
stbi__expand_png_palette	.\include\stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	.\include\stb_image.h	/^		stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	.\include\stb_image.h	2392;"	d
stbi__fill_bits	.\include\stb_image.h	/^	static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__float2fixed	.\include\stb_image.h	3605;"	d
stbi__float2int	.\include\stb_image.h	1863;"	d
stbi__float_postprocess	.\include\stb_image.h	/^		static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	.\include\stb_image.h	/^		static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	.\include\stb_image.h	/^	static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	.\include\stb_image.h	2393;"	d
stbi__g_failure_reason	.\include\stb_image.h	/^	const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	.\include\stb_image.h	/^		static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	.\include\stb_image.h	/^		static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	.\include\stb_image.h	/^		static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	.\include\stb_image.h	/^		static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	.\include\stb_image.h	/^		stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	.\include\stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	.\include\stb_image.h	/^	static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	.\include\stb_image.h	/^		static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	.\include\stb_image.h	/^		} stbi__gif;$/;"	t	typeref:struct:__anon22
stbi__gif_header	.\include\stb_image.h	/^		static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	.\include\stb_image.h	/^		static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	.\include\stb_image.h	/^		static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	.\include\stb_image.h	/^		static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	.\include\stb_image.h	/^		static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)$/;"	f
stbi__gif_lzw	.\include\stb_image.h	/^		} stbi__gif_lzw;$/;"	t	typeref:struct:__anon21
stbi__gif_parse_colortable	.\include\stb_image.h	/^		static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	.\include\stb_image.h	/^		static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	.\include\stb_image.h	/^		static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	.\include\stb_image.h	/^		static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	.\include\stb_image.h	/^		static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	.\include\stb_image.h	/^		static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	.\include\stb_image.h	/^		static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	.\include\stb_image.h	/^		static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	.\include\stb_image.h	/^		static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	.\include\stb_image.h	/^		static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	.\include\stb_image.h	/^		static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	.\include\stb_image.h	/^		static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	.\include\stb_image.h	/^		static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	.\include\stb_image.h	/^		static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	.\include\stb_image.h	/^		} stbi__huffman;$/;"	t	typeref:struct:__anon10
stbi__idct_block	.\include\stb_image.h	/^	static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	.\include\stb_image.h	/^	static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	.\include\stb_image.h	/^		static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	.\include\stb_image.h	/^	typedef   signed short stbi__int16;$/;"	t
stbi__int16	.\include\stb_image.h	/^	typedef int16_t  stbi__int16;$/;"	t
stbi__int32	.\include\stb_image.h	/^	typedef   signed int   stbi__int32;$/;"	t
stbi__int32	.\include\stb_image.h	/^	typedef int32_t  stbi__int32;$/;"	t
stbi__is_16_main	.\include\stb_image.h	/^		static int stbi__is_16_main(stbi__context *s)$/;"	f
stbi__jbias	.\include\stb_image.h	/^		static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	.\include\stb_image.h	/^		} stbi__jpeg;$/;"	t	typeref:struct:__anon11
stbi__jpeg_decode_block	.\include\stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	.\include\stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	.\include\stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	.\include\stb_image.h	/^	static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	.\include\stb_image.h	/^		static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	.\include\stb_image.h	/^	static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	.\include\stb_image.h	/^		stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	.\include\stb_image.h	/^		stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	.\include\stb_image.h	/^		stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	.\include\stb_image.h	/^	static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	.\include\stb_image.h	/^	static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	.\include\stb_image.h	/^	static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	.\include\stb_image.h	/^	static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	.\include\stb_image.h	/^	static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	.\include\stb_image.h	/^		static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	.\include\stb_image.h	/^		static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	.\include\stb_image.h	/^		static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	.\include\stb_image.h	/^		static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	.\include\stb_image.h	/^		static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_gif_main	.\include\stb_image.h	/^		static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi__load_gif_main_outofmem	.\include\stb_image.h	/^		static void *stbi__load_gif_main_outofmem(stbi__gif *g, stbi_uc *out, int **delays)$/;"	f
stbi__load_main	.\include\stb_image.h	/^		static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	.\include\stb_image.h	/^		static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	.\include\stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	.\include\stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	.\include\stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	.\include\stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	.\include\stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	.\include\stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	.\include\stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	.\include\stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	.\include\stb_image.h	/^		static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	.\include\stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	.\include\stb_image.h	/^	static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	.\include\stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	.\include\stb_image.h	/^		static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	.\include\stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	.\include\stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	.\include\stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	.\include\stb_image.h	/^		static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	.\include\stb_image.h	/^		static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	.\include\stb_image.h	/^		static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	.\include\stb_image.h	/^		static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	.\include\stb_image.h	/^		} stbi__pic_packet;$/;"	t	typeref:struct:__anon20
stbi__pic_test	.\include\stb_image.h	/^		static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	.\include\stb_image.h	/^		static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	.\include\stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon17
stbi__png_info	.\include\stb_image.h	/^		static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	.\include\stb_image.h	/^		static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_is16	.\include\stb_image.h	/^		static int stbi__png_is16(stbi__context *s)$/;"	f
stbi__png_load	.\include\stb_image.h	/^		static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	.\include\stb_image.h	/^		static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	.\include\stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon16
stbi__pnm_getinteger	.\include\stb_image.h	/^		static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	.\include\stb_image.h	/^		static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_is16	.\include\stb_image.h	/^		static int stbi__pnm_is16(stbi__context *s)$/;"	f
stbi__pnm_isdigit	.\include\stb_image.h	/^		static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	.\include\stb_image.h	/^		static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	.\include\stb_image.h	/^		static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	.\include\stb_image.h	/^		static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	.\include\stb_image.h	/^		static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	.\include\stb_image.h	/^	static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	.\include\stb_image.h	/^		static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	.\include\stb_image.h	/^	static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	.\include\stb_image.h	/^	static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	.\include\stb_image.h	/^		static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	.\include\stb_image.h	/^		static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_is16	.\include\stb_image.h	/^		static int stbi__psd_is16(stbi__context *s)$/;"	f
stbi__psd_load	.\include\stb_image.h	/^		static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	.\include\stb_image.h	/^		static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	.\include\stb_image.h	/^		static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	.\include\stb_image.h	/^		static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	.\include\stb_image.h	/^	} stbi__resample;$/;"	t	typeref:struct:__anon13
stbi__resample_row_generic	.\include\stb_image.h	/^	static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	.\include\stb_image.h	/^	static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	.\include\stb_image.h	/^	static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	.\include\stb_image.h	/^	static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	.\include\stb_image.h	/^	static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	.\include\stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon8
stbi__rewind	.\include\stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	.\include\stb_image.h	/^	static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	.\include\stb_image.h	/^		static int stbi__shiftsigned(unsigned int v, int shift, int bits)$/;"	f
stbi__skip	.\include\stb_image.h	/^		static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	.\include\stb_image.h	/^	static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	.\include\stb_image.h	/^	static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	.\include\stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	.\include\stb_image.h	/^	static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	.\include\stb_image.h	/^	static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	.\include\stb_image.h	/^	static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	.\include\stb_image.h	/^	static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	.\include\stb_image.h	/^	static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_get_comp	.\include\stb_image.h	/^		static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	.\include\stb_image.h	/^		static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	.\include\stb_image.h	/^		static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	.\include\stb_image.h	/^		static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	.\include\stb_image.h	/^		static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	.\include\stb_image.h	/^	typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	.\include\stb_image.h	/^	typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	.\include\stb_image.h	/^	typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	.\include\stb_image.h	/^	typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	.\include\stb_image.h	4952;"	d
stbi__unpremultiply_on_load	.\include\stb_image.h	4970;"	d
stbi__unpremultiply_on_load_global	.\include\stb_image.h	/^static int stbi__unpremultiply_on_load_global = 0;$/;"	v
stbi__unpremultiply_on_load_local	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__unpremultiply_on_load_local, stbi__unpremultiply_on_load_set;$/;"	v
stbi__unpremultiply_on_load_set	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__unpremultiply_on_load_local, stbi__unpremultiply_on_load_set;$/;"	v
stbi__unpremultiply_on_load_thread	.\include\stb_image.h	/^STBIDEF void stbi__unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)$/;"	f
stbi__vertical_flip	.\include\stb_image.h	/^		static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertical_flip_slices	.\include\stb_image.h	/^		static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	.\include\stb_image.h	1102;"	d
stbi__vertically_flip_on_load	.\include\stb_image.h	1112;"	d
stbi__vertically_flip_on_load_global	.\include\stb_image.h	/^static int stbi__vertically_flip_on_load_global = 0;$/;"	v
stbi__vertically_flip_on_load_local	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__vertically_flip_on_load_local, stbi__vertically_flip_on_load_set;$/;"	v
stbi__vertically_flip_on_load_set	.\include\stb_image.h	/^static STBI_THREAD_LOCAL int stbi__vertically_flip_on_load_local, stbi__vertically_flip_on_load_set;$/;"	v
stbi__zbuf	.\include\stb_image.h	/^	} stbi__zbuf;$/;"	t	typeref:struct:__anon15
stbi__zbuild_huffman	.\include\stb_image.h	/^	static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	.\include\stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	.\include\stb_image.h	/^static const stbi_uc stbi__zdefault_length[STBI__ZNSYMS] =$/;"	v
stbi__zdist_base	.\include\stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	.\include\stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v
stbi__zeof	.\include\stb_image.h	/^	stbi_inline static int stbi__zeof(stbi__zbuf *z)$/;"	f
stbi__zexpand	.\include\stb_image.h	/^	static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	.\include\stb_image.h	/^	stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	.\include\stb_image.h	/^	} stbi__zhuffman;$/;"	t	typeref:struct:__anon14
stbi__zhuffman_decode	.\include\stb_image.h	/^	stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	.\include\stb_image.h	/^	static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	.\include\stb_image.h	/^	static const int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	.\include\stb_image.h	/^	static const int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	.\include\stb_image.h	/^	stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	.\include\stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_convert_iphone_png_to_rgb_thread	.\include\stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert)$/;"	f
stbi_convert_wchar_to_utf8	.\include\stb_image.h	/^		STBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)$/;"	f
stbi_failure_reason	.\include\stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	.\include\stb_image.h	/^		STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	.\include\stb_image.h	/^		STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	.\include\stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	.\include\stb_image.h	/^		STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	.\include\stb_image.h	/^		STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	.\include\stb_image.h	/^		STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	.\include\stb_image.h	/^		STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	.\include\stb_image.h	612;"	d
stbi_inline	.\include\stb_image.h	614;"	d
stbi_inline	.\include\stb_image.h	617;"	d
stbi_io_callbacks	.\include\stb_image.h	/^	} stbi_io_callbacks;$/;"	t	typeref:struct:__anon5
stbi_is_16_bit	.\include\stb_image.h	/^		STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f
stbi_is_16_bit_from_callbacks	.\include\stb_image.h	/^		STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f
stbi_is_16_bit_from_file	.\include\stb_image.h	/^		STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f
stbi_is_16_bit_from_memory	.\include\stb_image.h	/^		STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_is_hdr	.\include\stb_image.h	/^		STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	.\include\stb_image.h	/^		STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	.\include\stb_image.h	/^		STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	.\include\stb_image.h	/^		STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	.\include\stb_image.h	/^		STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	.\include\stb_image.h	/^		STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	.\include\stb_image.h	/^		STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	.\include\stb_image.h	/^		STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	.\include\stb_image.h	/^		STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	.\include\stb_image.h	/^		STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	.\include\stb_image.h	/^		STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	.\include\stb_image.h	/^		STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	.\include\stb_image.h	/^		STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	.\include\stb_image.h	/^		STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_gif_from_memory	.\include\stb_image.h	/^		STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi_loadf	.\include\stb_image.h	/^		STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	.\include\stb_image.h	/^		STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	.\include\stb_image.h	/^		STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	.\include\stb_image.h	/^		STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	.\include\stb_image.h	665;"	d
stbi_lrot	.\include\stb_image.h	667;"	d
stbi_set_flip_vertically_on_load	.\include\stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_flip_vertically_on_load_thread	.\include\stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	.\include\stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	.\include\stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	.\include\stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_zlib_decode_buffer	.\include\stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	.\include\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	.\include\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	.\include\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	.\include\stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	.\include\stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbrp__findresult	.\include\stb_rect_pack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon25
stbrp__skyline_find_best_pos	.\include\stb_rect_pack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f
stbrp__skyline_find_min_y	.\include\stb_rect_pack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int *pwaste)$/;"	f
stbrp__skyline_pack_rectangle	.\include\stb_rect_pack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int height)$/;"	f
stbrp_context	.\include\stb_rect_pack.h	/^struct stbrp_context$/;"	s
stbrp_context	.\include\stb_rect_pack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	.\include\stb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon43
stbrp_coord	.\include\stb_rect_pack.h	/^typedef int            stbrp_coord;$/;"	t
stbrp_coord	.\include\stb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	.\include\stb_rect_pack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_init_target	.\include\stb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	.\include\stb_rect_pack.h	/^struct stbrp_node$/;"	s
stbrp_node	.\include\stb_rect_pack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	.\include\stb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon44
stbrp_pack_rects	.\include\stb_rect_pack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_pack_rects	.\include\stb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	.\include\stb_rect_pack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	.\include\stb_rect_pack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	.\include\stb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	.\include\stb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	.\include\stb_rect_pack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f
stbrp_setup_heuristic	.\include\stb_rect_pack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f
stbsp__bot	.\include\stb_sprintf.h	/^static double const stbsp__bot[23] = {$/;"	v
stbsp__cb_buf_clamp	.\include\stb_sprintf.h	1371;"	d
stbsp__cb_buf_clamp	.\include\stb_sprintf.h	383;"	d
stbsp__chk_cb_buf	.\include\stb_sprintf.h	1369;"	d
stbsp__chk_cb_buf	.\include\stb_sprintf.h	373;"	d
stbsp__chk_cb_bufL	.\include\stb_sprintf.h	1368;"	d
stbsp__chk_cb_bufL	.\include\stb_sprintf.h	364;"	d
stbsp__clamp_callback	.\include\stb_sprintf.h	/^static char *stbsp__clamp_callback(const char *buf, void *user, int len)$/;"	f
stbsp__comma	.\include\stb_sprintf.h	/^static char stbsp__comma = ',';$/;"	v
stbsp__context	.\include\stb_sprintf.h	/^typedef struct stbsp__context {$/;"	s
stbsp__context	.\include\stb_sprintf.h	/^} stbsp__context;$/;"	t	typeref:struct:stbsp__context
stbsp__count_clamp_callback	.\include\stb_sprintf.h	/^static char * stbsp__count_clamp_callback( const char * buf, void * user, int len )$/;"	f
stbsp__ddmulthi	.\include\stb_sprintf.h	1599;"	d
stbsp__ddmulthi	.\include\stb_sprintf.h	1847;"	d
stbsp__ddmultlo	.\include\stb_sprintf.h	1634;"	d
stbsp__ddmultlo	.\include\stb_sprintf.h	1849;"	d
stbsp__ddmultlos	.\include\stb_sprintf.h	1636;"	d
stbsp__ddmultlos	.\include\stb_sprintf.h	1850;"	d
stbsp__ddrenorm	.\include\stb_sprintf.h	1626;"	d
stbsp__ddrenorm	.\include\stb_sprintf.h	1848;"	d
stbsp__ddtoS64	.\include\stb_sprintf.h	1615;"	d
stbsp__digitpair	.\include\stb_sprintf.h	/^} stbsp__digitpair =$/;"	v	typeref:struct:__anon26
stbsp__flush_cb	.\include\stb_sprintf.h	1370;"	d
stbsp__flush_cb	.\include\stb_sprintf.h	379;"	d
stbsp__int32	.\include\stb_sprintf.h	1859;"	d
stbsp__int32	.\include\stb_sprintf.h	221;"	d
stbsp__int64	.\include\stb_sprintf.h	1861;"	d
stbsp__int64	.\include\stb_sprintf.h	225;"	d
stbsp__int64	.\include\stb_sprintf.h	228;"	d
stbsp__lead_sign	.\include\stb_sprintf.h	/^static void stbsp__lead_sign(stbsp__uint32 fl, char *sign)$/;"	f
stbsp__negbot	.\include\stb_sprintf.h	/^static double const stbsp__negbot[22] = {$/;"	v
stbsp__negboterr	.\include\stb_sprintf.h	/^static double const stbsp__negboterr[22] = {$/;"	v
stbsp__negtop	.\include\stb_sprintf.h	/^static double const stbsp__negtop[13] = {$/;"	v
stbsp__negtoperr	.\include\stb_sprintf.h	/^static double const stbsp__negtoperr[13] = {$/;"	v
stbsp__period	.\include\stb_sprintf.h	/^static char stbsp__period = '.';$/;"	v
stbsp__powten	.\include\stb_sprintf.h	/^static stbsp__uint64 const stbsp__powten[20] = {$/;"	v
stbsp__raise_to_power10	.\include\stb_sprintf.h	/^static void stbsp__raise_to_power10(double *ohi, double *olo, double d, stbsp__int32 power) \/\/ power can be -323 to +350$/;"	f
stbsp__real_to_parts	.\include\stb_sprintf.h	/^static stbsp__int32 stbsp__real_to_parts(stbsp__int64 *bits, stbsp__int32 *expo, double value)$/;"	f
stbsp__real_to_str	.\include\stb_sprintf.h	/^static stbsp__int32 stbsp__real_to_str(char const **start, stbsp__uint32 *len, char *out, stbsp__int32 *decimal_pos, double value, stbsp__uint32 frac_digits)$/;"	f
stbsp__strlen_limited	.\include\stb_sprintf.h	/^static STBSP__ASAN stbsp__uint32 stbsp__strlen_limited(char const *s, stbsp__uint32 limit)$/;"	f
stbsp__tento19th	.\include\stb_sprintf.h	1572;"	d
stbsp__tento19th	.\include\stb_sprintf.h	1596;"	d
stbsp__top	.\include\stb_sprintf.h	/^static double const stbsp__top[13] = {$/;"	v
stbsp__toperr	.\include\stb_sprintf.h	/^static double const stbsp__toperr[13] = {$/;"	v
stbsp__uint16	.\include\stb_sprintf.h	1857;"	d
stbsp__uint16	.\include\stb_sprintf.h	230;"	d
stbsp__uint32	.\include\stb_sprintf.h	1858;"	d
stbsp__uint32	.\include\stb_sprintf.h	220;"	d
stbsp__uint64	.\include\stb_sprintf.h	1860;"	d
stbsp__uint64	.\include\stb_sprintf.h	224;"	d
stbsp__uint64	.\include\stb_sprintf.h	227;"	d
stbsp__uintptr	.\include\stb_sprintf.h	234;"	d
stbsp__uintptr	.\include\stb_sprintf.h	236;"	d
stbtt_BakeFontBitmap	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f
stbtt_BakeFontBitmap_internal	.\include\stb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian_internal	.\include\stb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f
stbtt_FindGlyphIndex	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f
stbtt_FindMatchingFont_internal	.\include\stb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FindSVGDoc	.\include\stb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f
stbtt_FlattenCurves	.\include\stb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeSDF	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	.\include\stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	.\include\stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	.\include\stb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointSDF	.\include\stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointSVG	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const char **svg)$/;"	f
stbtt_GetCodepointShape	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	.\include\stb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f
stbtt_GetFontOffsetForIndex_internal	.\include\stb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetFontVMetricsOS2	.\include\stb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap)$/;"	f
stbtt_GetGlyphBitmap	.\include\stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	.\include\stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBox	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	.\include\stb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f
stbtt_GetGlyphSDF	.\include\stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphSVG	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f
stbtt_GetGlyphShape	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetKerningTable	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int table_length)$/;"	f
stbtt_GetKerningTableLength	.\include\stb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f
stbtt_GetNumberOfFonts	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f
stbtt_GetNumberOfFonts_internal	.\include\stb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f
stbtt_GetPackedQuad	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_GetScaledFontVMetrics	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size, float *ascent, float *descent, float *lineGap)$/;"	f
stbtt_InitFont	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f
stbtt_InitFont_internal	.\include\stb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixelPrefilter	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixelPrefilter	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)$/;"	f
stbtt_PackBegin	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	.\include\stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_PackSetSkipMissingCodepoints	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f
stbtt_Rasterize	.\include\stb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	.\include\stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	.\include\stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	.\include\stb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1, stbtt_uint8 *s2, stbtt_int32 len2)$/;"	f
stbtt__GetCoverageIndex	.\include\stb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f
stbtt__GetGlyfOffset	.\include\stb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__GetGlyphClass	.\include\stb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f
stbtt__GetGlyphGPOSInfoAdvance	.\include\stb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphInfoT2	.\include\stb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt__GetGlyphKernInfoAdvance	.\include\stb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphShapeT2	.\include\stb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__GetGlyphShapeTT	.\include\stb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__active_edge	.\include\stb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	.\include\stb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	.\include\stb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	.\include\stb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon34
stbtt__buf	.\include\stb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon27
stbtt__buf_get	.\include\stb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f
stbtt__buf_get16	.\include\stb_truetype.h	1178;"	d
stbtt__buf_get32	.\include\stb_truetype.h	1179;"	d
stbtt__buf_get8	.\include\stb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f
stbtt__buf_peek8	.\include\stb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f
stbtt__buf_range	.\include\stb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f
stbtt__buf_seek	.\include\stb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f
stbtt__buf_skip	.\include\stb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f
stbtt__cff_get_index	.\include\stb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f
stbtt__cff_index_count	.\include\stb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f
stbtt__cff_index_get	.\include\stb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f
stbtt__cff_int	.\include\stb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f
stbtt__cff_skip_operand	.\include\stb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f
stbtt__check_size16	.\include\stb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	.\include\stb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__cid_get_glyph_subrs	.\include\stb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__close_shape	.\include\stb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__compute_crossings_x	.\include\stb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f
stbtt__csctx	.\include\stb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon41
stbtt__csctx_close_shape	.\include\stb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f
stbtt__csctx_rccurve_to	.\include\stb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)$/;"	f
stbtt__csctx_rline_to	.\include\stb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_rmove_to	.\include\stb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_v	.\include\stb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy, stbtt_int32 cx1, stbtt_int32 cy1)$/;"	f
stbtt__cuberoot	.\include\stb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f
stbtt__dict_get	.\include\stb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f
stbtt__dict_get_ints	.\include\stb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f
stbtt__edge	.\include\stb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	.\include\stb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	.\include\stb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	.\include\stb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	.\include\stb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__get_subr	.\include\stb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f
stbtt__get_subrs	.\include\stb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f
stbtt__get_svg	.\include\stb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f
stbtt__h_prefilter	.\include\stb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	.\include\stb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	.\include\stb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	.\include\stb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	.\include\stb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	.\include\stb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	.\include\stb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	.\include\stb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	.\include\stb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	.\include\stb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f
stbtt__matches	.\include\stb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	.\include\stb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	.\include\stb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__new_buf	.\include\stb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f
stbtt__oversample_shift	.\include\stb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	.\include\stb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon42
stbtt__position_trapezoid_area	.\include\stb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float bx1)$/;"	f
stbtt__rasterize	.\include\stb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	.\include\stb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__ray_intersect_bezier	.\include\stb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], float q2[2], float hits[2][2])$/;"	f
stbtt__run_charstring	.\include\stb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f
stbtt__sized_trapezoid_area	.\include\stb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f
stbtt__sized_triangle_area	.\include\stb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f
stbtt__solve_cubic	.\include\stb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f
stbtt__sort_edges	.\include\stb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	.\include\stb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	.\include\stb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_cubic	.\include\stb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float objspace_flatness_squared, int n)$/;"	f
stbtt__tesselate_curve	.\include\stb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	.\include\stb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__track_vertex	.\include\stb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f
stbtt__v_prefilter	.\include\stb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	.\include\stb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon29
stbtt_bakedchar	.\include\stb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon28
stbtt_fontinfo	.\include\stb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	.\include\stb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	.\include\stb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	.\include\stb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	.\include\stb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_kerningentry	.\include\stb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	.\include\stb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	.\include\stb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	.\include\stb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	.\include\stb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon31
stbtt_packedchar	.\include\stb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon30
stbtt_setvertex	.\include\stb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	.\include\stb_truetype.h	1292;"	d
stbtt_tag4	.\include\stb_truetype.h	1291;"	d
stbtt_uint16	.\include\stb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	.\include\stb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	.\include\stb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	.\include\stb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon33
stbtt_vertex_type	.\include\stb_truetype.h	834;"	d
step	.\include\stb_image.h	/^			int parse, step;$/;"	m	struct:__anon22
stride	.\include\stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon34
stride	.\renderer.h	/^	u32 stride;$/;"	m	struct:SetVertexBuffer
stride_in_bytes	.\include\stb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
structured	.\renderer.h	/^	StructuredBuffer* structured; $/;"	m	struct:SetStructuredBuffer
structured_buffer	.\font_handling.cpp	/^	StructuredBuffer* structured_buffer;$/;"	m	struct:TextUI	file:
subrs	.\include\stb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo
succ_high	.\include\stb_image.h	/^			int            succ_high;$/;"	m	struct:__anon11
succ_low	.\include\stb_image.h	/^			int            succ_low;$/;"	m	struct:__anon11
suffix	.\include\stb_image.h	/^			stbi_uc suffix;$/;"	m	struct:__anon21
svg	.\include\stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
swapchain	.\renderer.h	/^	IDXGISwapChain1* swapchain;$/;"	m	struct:Renderer
sy	.\include\stb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge
t0	.\font_handling.cpp	/^	float s0, t0, s1, t1;$/;"	m	struct:Glyph	file:
t0	.\include\stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon29
t1	.\font_handling.cpp	/^	float s0, t0, s1, t1;$/;"	m	struct:Glyph	file:
t1	.\include\stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon29
team	.\simulation.h	/^	u8 team;$/;"	m	struct:Entity
temp	.\include\stb_sprintf.h	/^   short temp; \/\/ force next field to be 2-byte aligned$/;"	m	struct:__anon26
temp_bitmap	.\include\stb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
temp_count	.\memory_management.h	/^	u32 temp_count;$/;"	m	struct:MemoryArena
tertiary_color	.\ui_renderer.cpp	/^	Vec4 tertiary_color[2];$/;"	m	struct:UIElement	file:
test_mode	.\game.h	/^	TestMode test_mode;$/;"	m	struct:GameState
texcoords	.\quad_renderer.cpp	/^	Vec2 texcoords[MAX_TEXTURED_QUADS*4];$/;"	m	struct:QuadRenderer	file:
text	.\ui_renderer.cpp	/^	char** text;$/;"	m	struct:UIElement	file:
text_count	.\ui_renderer.cpp	/^	u8 text_count;$/;"	m	struct:UIElement	file:
text_shader	.\font_handling.cpp	/^	VertexShader* text_shader;$/;"	m	struct:TextUI	file:
text_ui	.\game.h	/^	TextUI* text_ui;$/;"	m	struct:GameState
text_ui	.\ui_renderer.cpp	/^	TextUI* text_ui;$/;"	m	struct:UIRenderer	file:
texture	.\quad_renderer.cpp	/^	TextureBuffer* texture;$/;"	m	struct:TexturedQuad	file:
texture	.\renderer.h	/^	ID3D11Texture2D* texture;$/;"	m	struct:DepthStencil
texture	.\renderer.h	/^	ID3D11Texture2D* texture;$/;"	m	struct:ReadableRenderTarget
texture	.\renderer.h	/^	ID3D11Texture2D* texture;$/;"	m	struct:RenderTarget
texture	.\renderer.h	/^	TextureBuffer* texture; $/;"	m	struct:SetTextureBuffer
texture_assets	.\asset_loading.cpp	/^	TextureAssetInfo* texture_assets;$/;"	m	struct:GameAssets	file:
texture_count	.\simulation.h	/^	u32 texture_count;$/;"	m	struct:ParticleSystem
texture_data	.\asset_formats.h	/^	TextureData* texture_data;$/;"	m	struct:MaterialData
texture_type_names	.\file_formats.h	/^char* texture_type_names[TEXTURE_SLOT_TOTAL] = {$/;"	v
textured_quad	.\simulation.h	/^	TexturedQuad textured_quad;$/;"	m	struct:Entity
textured_quad_counter	.\quad_renderer.cpp	/^	u32 textured_quad_counter;$/;"	m	struct:QuadRenderer	file:
textured_quad_ps	.\quad_renderer.cpp	/^	PixelShader* textured_quad_ps;$/;"	m	struct:QuadRenderer	file:
textured_quad_vertex_buffers	.\quad_renderer.cpp	/^	VertexBuffer* textured_quad_vertex_buffers[2];$/;"	m	struct:QuadRenderer	file:
textured_quad_vs	.\quad_renderer.cpp	/^	VertexShader* textured_quad_vs;$/;"	m	struct:QuadRenderer	file:
textures	.\quad_renderer.cpp	/^	TextureBuffer* textures[MAX_TEXTURED_QUADS];$/;"	m	struct:QuadRenderer	file:
textures	.\simulation.h	/^	TextureBuffer* textures[MAX_PARTICLES];$/;"	m	struct:ParticleSystem
textures_count	.\file_formats.h	/^	u32 textures_count;$/;"	m	struct:TexturesBlob
timer	.\game.h	/^	Timer timer;$/;"	m	struct:GameState
timer	.\game_layer.h	/^	float timer;$/;"	m	struct:GameLayer
tl	.\shapes.cpp	/^			Vec3 tl;$/;"	m	struct:Quad::__anon57::__anon58	file:
tmp	.\include\stb_sprintf.h	/^   char tmp[STB_SPRINTF_MIN];$/;"	m	struct:stbsp__context
todo	.\include\stb_image.h	/^			int restart_interval, todo;$/;"	m	struct:__anon11
top	.\camera.cpp	/^			float top;$/;"	m	struct:Camera::__anon1::__anon3	file:
topleft	.\renderer.h	/^	Vec2 topleft;$/;"	m	struct:SetViewport
topology	.\mesh_renderer.cpp	/^	u8 topology;$/;"	m	struct:Mesh	file:
total_arena	.\game.h	/^	MemoryArena total_arena;$/;"	m	struct:GameState
tq	.\include\stb_image.h	/^				int tq;$/;"	m	struct:__anon11::__anon12
tr	.\shapes.cpp	/^			Vec3 tr;$/;"	m	struct:Quad::__anon57::__anon58	file:
trans_sens	.\camera.cpp	/^	float trans_sens;$/;"	m	struct:FPControlInfo	file:
transform	.\simulation.h	/^	Transform transform;$/;"	m	struct:Entity
transform	.\simulation.h	/^	Transform transform;$/;"	m	struct:SpawnInfo
transform	.\tetra.cpp	/^	Transform transform[MAX_TETRA];$/;"	m	struct:Tetra	file:
transforms	.\simulation.h	/^	Transform transforms[MAX_SPAWNS];$/;"	m	struct:SpawnerInfo
transient_dll_counter	.\win32.h	/^	u32 transient_dll_counter;$/;"	m	struct:Win32DLL
transient_dll_name	.\win32.h	/^	char* transient_dll_name;$/;"	m	struct:Win32DLL
transparent	.\include\stb_image.h	/^			int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon22
ttBYTE	.\include\stb_truetype.h	1282;"	d
ttCHAR	.\include\stb_truetype.h	1283;"	d
ttFixed	.\include\stb_truetype.h	1284;"	d
ttLONG	.\include\stb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	.\include\stb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	.\include\stb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	.\include\stb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf	.\font_handling.cpp	/^	void* ttf;$/;"	m	struct:TextUI	file:
ttf_buffer	.\include\stb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	.\include\stb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
type	.\asset_formats.h	/^	TEXTURE_SLOT type;$/;"	m	struct:TextureData
type	.\asset_formats.h	/^	VERTEX_BUFFER type;$/;"	m	struct:VertexBufferData
type	.\file_formats.h	/^	char type[STRING_LENGTH_TEXTURE_TYPE];$/;"	m	struct:TextureFormat
type	.\file_formats.h	/^	char type[STRING_LENGTH_VERTEX_BUFFER];$/;"	m	struct:VertexBufferFormat
type	.\include\stb_image.h	/^			stbi_uc size,type,channel;$/;"	m	struct:__anon20
type	.\include\stb_image.h	/^	stbi__uint32 type;$/;"	m	struct:__anon16
type	.\include\stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon33
type	.\post_process_renderer.cpp	/^	u8 type;$/;"	m	struct:PostProcessPipeline	file:
type	.\renderer.h	/^	u8 type;$/;"	m	struct:SetDepthStencilState
type	.\renderer.h	/^	u8 type;$/;"	m	struct:SetSamplerState
type	.\renderer.h	/^struct RenderCommandHeader { u8 type; };$/;"	m	struct:RenderCommandHeader
type	.\renderer.h	/^struct SetBlendState        { u8 type;              } ;$/;"	m	struct:SetBlendState
type	.\renderer.h	/^struct SetPrimitiveTopology { u8 type;              } ;$/;"	m	struct:SetPrimitiveTopology
type	.\renderer.h	/^struct SetRasterizerState   { u8 type;              } ;$/;"	m	struct:SetRasterizerState
type	.\simulation.h	/^	u8 type;$/;"	m	struct:SpawnInfo
u16	.\base_types.h	/^typedef uint16_t u16;$/;"	t
u32	.\base_types.h	/^typedef uint32_t u32;$/;"	t
u64	.\base_types.h	/^typedef uint64_t u64;$/;"	t
u8	.\base_types.h	/^typedef uint8_t u8;$/;"	t
ui_renderer	.\game.h	/^	UIRenderer* ui_renderer;$/;"	m	struct:GameState
used	.\memory_management.h	/^	u64 used;$/;"	m	struct:TemporaryMemory
used	.\platform_api.h	/^	u64 used;$/;"	m	struct:PlatformMemoryBlock
user_allocator_context	.\include\stb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
userdata	.\include\stb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo
v	.\include\stb_image.h	/^				int h,v;$/;"	m	struct:__anon11::__anon12
v_oversample	.\include\stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon31
v_oversample	.\include\stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
valid	.\win32.h	/^	bool valid;$/;"	m	struct:Win32DLL
validate_uint32	.\include\stb_image.h	/^	typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	.\include\stb_image.h	/^		stbi__uint16 value[STBI__ZNSYMS];$/;"	m	struct:__anon14
value	.\renderer.h	/^	float value;$/;"	m	struct:ClearDepth
value	.\renderer.h	/^	u8 value;$/;"	m	struct:ClearStencil
values	.\include\stb_image.h	/^			stbi_uc  values[256];$/;"	m	struct:__anon10
vb_data	.\asset_formats.h	/^	VertexBufferData* vb_data;$/;"	m	struct:MeshData
vb_data_count	.\asset_formats.h	/^	u32 vb_data_count;$/;"	m	struct:MeshData
vertex	.\renderer.h	/^	VertexBuffer* vertex;         $/;"	m	struct:SetVertexBuffer
vertex	.\renderer.h	/^struct SetVertexShader      { VertexShader* vertex; } ;$/;"	m	struct:SetVertexShader
vertex_buffer_count	.\file_formats.h	/^	u8 vertex_buffer_count;$/;"	m	struct:MeshFormat
vertex_buffer_names	.\file_formats.h	/^char* vertex_buffer_names[VERTEX_BUFFER_TOTAL] = {$/;"	v
vertex_buffers	.\mesh_renderer.cpp	/^	VertexBuffer* vertex_buffers[2];$/;"	m	struct:Mesh	file:
vertex_buffers	.\tetra.cpp	/^	RenderBufferGroup* vertex_buffers;$/;"	m	struct:Tetra	file:
vertex_shader	.\renderer.h	/^	bool vertex_shader;$/;"	m	struct:SetConstantsBuffer
vertex_shader	.\renderer.h	/^	bool vertex_shader;$/;"	m	struct:SetStructuredBuffer
vertices_count	.\asset_formats.h	/^	u32 vertices_count;$/;"	m	struct:MeshData
vertices_count	.\file_formats.h	/^	u32 vertices_count;$/;"	m	struct:MeshFormat
vertices_count	.\mesh_renderer.cpp	/^	u32 vertices_count;$/;"	m	struct:Mesh	file:
vertices_count	.\renderer.h	/^	u32 vertices_count;$/;"	m	struct:DrawInstanced
vertices_count	.\renderer.h	/^	u32 vertices_count;$/;"	m	struct:DrawVertices
vertices_count	.\renderer.h	/^	u32 vertices_count;$/;"	m	struct:SetVertexBuffer
view	.\renderer.h	/^	ID3D11DepthStencilView* view;$/;"	m	struct:DepthStencil
view	.\renderer.h	/^	ID3D11RenderTargetView* view;$/;"	m	struct:RenderTarget
view	.\renderer.h	/^	ID3D11ShaderResourceView* view;$/;"	m	struct:StructuredBuffer
view	.\renderer.h	/^	ID3D11ShaderResourceView* view;$/;"	m	struct:TextureBuffer
vs	.\include\stb_image.h	/^		int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon13
vs	.\mesh_renderer.cpp	/^	VertexShader* vs;$/;"	m	struct:MeshRenderer	file:
vs	.\ui_renderer.cpp	/^	VertexShader* vs;$/;"	m	struct:UIRenderer	file:
vsnprintf	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF int STB_SPRINTF_DECORATE( vsnprintf )( char * buf, int count, char const * fmt, va_list va )$/;"	f
vsprintf	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(vsprintf)(char *buf, char const *fmt, va_list va)$/;"	f
vsprintfcb	.\include\stb_sprintf.h	/^STBSP__PUBLICDEF int STB_SPRINTF_DECORATE(vsprintfcb)(STBSP_SPRINTFCB *callback, void *user, char *buf, char const *fmt, va_list va)$/;"	f
w	.\include\stb_image.h	/^			int w,h;$/;"	m	struct:__anon22
w	.\include\stb_rect_pack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
w	.\include\stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	.\include\stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon34
w	.\math.h	/^			float w;$/;"	m	struct:Vec4::__anon51::__anon52
w	.\math.h	/^			float x, y, z, w;$/;"	m	struct:Quat::__anon54::__anon55
w2	.\include\stb_image.h	/^				int x,y,w2,h2;$/;"	m	struct:__anon11::__anon12
w_lores	.\include\stb_image.h	/^		int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon13
was_packed	.\include\stb_rect_pack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect
was_packed	.\include\stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
width	.\asset_formats.h	/^	u32 width;$/;"	m	struct:TextureData
width	.\file_formats.h	/^	u32 width;$/;"	m	struct:TextureFormat
width	.\include\stb_rect_pack.h	/^   int width;$/;"	m	struct:stbrp_context
width	.\include\stb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context
width	.\include\stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon43
width	.\platform_api.h	/^struct WindowDimensions { u32 width; u32 height; };$/;"	m	struct:WindowDimensions
win32_api	.\win32.cpp	/^PlatformAPI win32_api;$/;"	v
win32_game_function_names	.\win32.h	/^char* win32_game_function_names[] = {$/;"	v
window_dim	.\renderer.h	/^	WindowDimensions window_dim;$/;"	m	struct:Renderer
x	.\include\stb_image.h	/^				int x,y,w2,h2;$/;"	m	struct:__anon11::__anon12
x	.\include\stb_rect_pack.h	/^   int x,y;$/;"	m	struct:__anon25
x	.\include\stb_rect_pack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
x	.\include\stb_rect_pack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
x	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
x	.\include\stb_truetype.h	/^   float x, y;$/;"	m	struct:__anon41
x	.\include\stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon42
x	.\include\stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
x	.\include\stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon43
x	.\include\stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	.\include\stb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon44
x	.\math.h	/^			float x, y, z, w;$/;"	m	struct:Quat::__anon54::__anon55
x	.\math.h	/^			float x;$/;"	m	struct:Vec2::__anon47::__anon48
x	.\math.h	/^			float x;$/;"	m	struct:Vec3::__anon49::__anon50
x	.\math.h	/^			float x;$/;"	m	struct:Vec4::__anon51::__anon52
x	.\math.h	/^			u32 x;$/;"	m	struct:Vec2u::__anon45::__anon46
x	.\platform_api.h	/^struct Axis { float x, y; };$/;"	m	struct:Axis
x0	.\font_handling.cpp	/^	float x0, y0, x1, y1;$/;"	m	struct:Glyph	file:
x0	.\include\stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	.\include\stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon29
x0	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon28
x0	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon30
x1	.\font_handling.cpp	/^	float x0, y0, x1, y1;$/;"	m	struct:Glyph	file:
x1	.\include\stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	.\include\stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon29
x1	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon28
x1	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon30
xadvance	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon28
xadvance	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon30
xoff	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon28
xoff	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon30
xoff2	.\include\stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon30
xyz	.\math.h	/^			Vec3 xyz;$/;"	m	struct:Quat::__anon54::__anon56
xyz	.\math.h	/^			Vec3 xyz;$/;"	m	struct:Vec4::__anon51::__anon53
y	.\include\stb_image.h	/^				int x,y,w2,h2;$/;"	m	struct:__anon11::__anon12
y	.\include\stb_rect_pack.h	/^   int x,y;$/;"	m	struct:__anon25
y	.\include\stb_rect_pack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
y	.\include\stb_rect_pack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
y	.\include\stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon33
y	.\include\stb_truetype.h	/^   float x, y;$/;"	m	struct:__anon41
y	.\include\stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon42
y	.\include\stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon43
y	.\include\stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y	.\math.h	/^			float x, y, z, w;$/;"	m	struct:Quat::__anon54::__anon55
y	.\math.h	/^			float y;$/;"	m	struct:Vec2::__anon47::__anon48
y	.\math.h	/^			float y;$/;"	m	struct:Vec3::__anon49::__anon50
y	.\math.h	/^			float y;$/;"	m	struct:Vec4::__anon51::__anon52
y	.\math.h	/^			u32 y;$/;"	m	struct:Vec2u::__anon45::__anon46
y	.\platform_api.h	/^struct Axis { float x, y; };$/;"	m	struct:Axis
y0	.\font_handling.cpp	/^	float x0, y0, x1, y1;$/;"	m	struct:Glyph	file:
y0	.\include\stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	.\include\stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon29
y0	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon28
y0	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon30
y1	.\font_handling.cpp	/^	float x0, y0, x1, y1;$/;"	m	struct:Glyph	file:
y1	.\include\stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	.\include\stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon29
y1	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon28
y1	.\include\stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon30
y_cursor	.\font_handling.cpp	/^	float y_cursor;$/;"	m	struct:TextUI	file:
yoff	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon28
yoff	.\include\stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon30
yoff2	.\include\stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon30
ypos	.\include\stb_image.h	/^		int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon13
ystep	.\include\stb_image.h	/^		int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon13
z	.\math.h	/^			float x, y, z, w;$/;"	m	struct:Quat::__anon54::__anon55
z	.\math.h	/^			float z;$/;"	m	struct:Quat::__anon54::__anon56
z	.\math.h	/^			float z;$/;"	m	struct:Vec3::__anon49::__anon50
z	.\math.h	/^			float z;$/;"	m	struct:Vec4::__anon51::__anon52
z	.\math.h	/^			float z;$/;"	m	struct:Vec4::__anon51::__anon53
z_distance	.\include\stb_image.h	/^		stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon15
z_expandable	.\include\stb_image.h	/^		int   z_expandable;$/;"	m	struct:__anon15
z_length	.\include\stb_image.h	/^		stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon15
zbuffer	.\include\stb_image.h	/^		stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon15
zbuffer_end	.\include\stb_image.h	/^		stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon15
zout	.\include\stb_image.h	/^		char *zout;$/;"	m	struct:__anon15
zout_end	.\include\stb_image.h	/^		char *zout_end;$/;"	m	struct:__anon15
zout_start	.\include\stb_image.h	/^		char *zout_start;$/;"	m	struct:__anon15
